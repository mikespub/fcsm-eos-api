{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0.0",
    "title": "Azure Connector",
    "description": "EOS connector to Azure cloud"
  },
  "servers": [
    {
      "url": "/api/v1/azure/compute",
      "description": "Azure Connector API"
    }
  ],
  "paths": {
    "/publicImages": {
      "get": {
        "operationId": "azure_service.api.public_images.get",
        "summary": "Lists all public images for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/ImageName"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of public images",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "$ref": "#/components/schemas/PublicPrivateImage"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/publicImages/{image_id}": {
      "get": {
        "operationId": "azure_service.api.public_image.get",
        "summary": "Gets a single public image by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/ImageId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single public image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPrivateImage"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/privateImages": {
      "get": {
        "operationId": "azure_service.api.private_images.get",
        "summary": "Lists private images for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/ImageName"
          }
        ],
        "responses": {
          "200": {
            "description": "Since there are no private images in Azure returned list is always empty.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "maxItems": 0,
                  "items": {
                    "$ref": "#/components/schemas/PublicPrivateImage"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/privateImages/{image_id}": {
      "get": {
        "operationId": "azure_service.api.private_image.get",
        "summary": "Gets a single private image by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/ImageId"
          }
        ],
        "responses": {
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/validateSubscription": {
      "post": {
        "operationId": "azure_service.api.validate_subscription.post",
        "summary": "Validate subscription credentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Properly validated subscription"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/images/{image_id}": {
      "get": {
        "operationId": "azure_service.api.image.get",
        "summary": "Gets a single image by id",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/ImageId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPrivateImage"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/regions": {
      "get": {
        "operationId": "azure_service.api.regions.get",
        "summary": "Lists regions",
        "description": "If subscriptionId is not passed as query parameters endpoint returns list of regions not scoped to any subscription. Otherwise it returns regions for specified subscription.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/OptionalSubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "$ref": "#/components/schemas/Region"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/availabilityZones": {
      "get": {
        "operationId": "azure_service.api.availability_zone.get",
        "summary": "Lists availability zones for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of availability zones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 1,
                  "items": {
                    "$ref": "#/components/schemas/AvailabilityZone"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/availabilitySets": {
      "get": {
        "operationId": "azure_service.api.availability_sets.get",
        "summary": "Lists availability sets for specified subscription and resource group",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of availability sets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailabilitySet"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/availabilitySets/{availability_set_id}": {
      "get": {
        "operationId": "azure_service.api.availability_set.get",
        "summary": "Gets availability set by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/AvailabilitySetId"
          }
        ],
        "responses": {
          "200": {
            "description": "Availability set identified by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailabilitySet"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/resourceGroups": {
      "get": {
        "operationId": "azure_service.api.resource_groups.get",
        "summary": "Lists resource groups",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of resource groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceGroup"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "operationId": "azure_service.api.resource_groups.post",
        "summary": "Creates new resource group",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New resource group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/flavors": {
      "get": {
        "operationId": "azure_service.api.flavors.get",
        "summary": "Lists flavors for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of flavors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Flavor"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/flavors/{flavor_id}": {
      "get": {
        "operationId": "azure_service.api.flavor.get",
        "summary": "Gets a single flavor by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FlavorId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single flavor identified by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flavor"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms": {
      "get": {
        "operationId": "azure_service.api.vms.get",
        "summary": "Lists virtual machines for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterAvailabilitySetId"
          },
          {
            "$ref": "#/components/parameters/FilterAvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of virtual machines",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VMSimple"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "operationId": "azure_service.api.vms.post",
        "summary": "Provisions virtual machine according to specified parameters",
        "description": "May provision managed or unmanaged virtual machine in accordance to the `managementToolId` property. If such is set and points to valid `management tool`, virtual machine will have aformentioned tool deployed and it will be possible to install the application on it.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "description": "Parameters for the new virtual machine",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VMCreateData"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/VMExtended"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/vms/{vm_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/SubscriptionId"
        },
        {
          "$ref": "#/components/parameters/VMId"
        }
      ],
      "get": {
        "operationId": "azure_service.api.vm.get",
        "summary": "Gets a single virtual machine by ID",
        "responses": {
          "200": {
            "$ref": "#/components/responses/VMExtended"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "operationId": "azure_service.api.vm.patch",
        "summary": "Modifies specified virtual machine",
        "requestBody": {
          "description": "Virtual machine object to modify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VMPatch"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Modified virtual machine"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "operationId": "azure_service.api.vm.delete",
        "summary": "Deletes a single virtual machine by ID",
        "description": "Endpoint takes care of deleting the virtual machine from the platform.\nIt also removes:\n\n- OS volume\n- all network interfaces\n- management if VM was managed by management tool\n- workshift if VM had one\n- initial password if VM was provisioned with one\n",
        "responses": {
          "204": {
            "description": "VM deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms/{vm_id}/workshift": {
      "post": {
        "summary": "Add a workshift to the VM",
        "description": "Create a VM Workshift",
        "operationId": "azure_service.api.vm_workshift.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          }
        ],
        "requestBody": {
          "description": "Workshift object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workshift"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Workshift created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workshift"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "summary": "Update VM Workshift",
        "description": "Update a VM Workshift",
        "operationId": "azure_service.api.vm_workshift.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          }
        ],
        "requestBody": {
          "description": "Workshift object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workshift"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workshift created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workshift"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "summary": "Delete VM Workshift",
        "description": "Delete VM Workshift",
        "operationId": "azure_service.api.vm_workshift.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          }
        ],
        "responses": {
          "204": {
            "description": "Workshift deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms/{vm_id}/management": {
      "get": {
        "operationId": "azure_service.api.vm_management.get",
        "summary": "Gets specified virtual machine management status",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single virtual machine identified by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementStatus"
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms/{vm_id}/command/{action}": {
      "put": {
        "operationId": "azure_service.api.vm_command.put",
        "summary": "Executes power action on a VM",
        "description": "Executes power action on a VM. Only specified VMPowerAction are allowed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          },
          {
            "$ref": "#/components/parameters/VMPowerAction"
          }
        ],
        "responses": {
          "202": {
            "description": "Volume was updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms/{vm_id}/password": {
      "get": {
        "operationId": "azure_service.api.vm_password.get",
        "summary": "Gets specified virtual machine encrypted password",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machine encrypted password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptedPassword"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms/{vm_id}/details": {
      "get": {
        "operationId": "azure_service.api.vm_details.get",
        "summary": "Gets specified virtual machine details",
        "description": "If specified virtual machine is provision with enabled management details will contain information gathered by management tool. Aither way it will contains basic information\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machine details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VmDetails"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/volumes": {
      "get": {
        "operationId": "azure_service.api.volumes.get",
        "summary": "Lists volumes for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterVolumeStatus"
          },
          {
            "$ref": "#/components/parameters/FilterIsOsDisk"
          },
          {
            "$ref": "#/components/parameters/FilterAvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of volumes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "$ref": "#/components/schemas/Volume"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "operationId": "azure_service.api.volumes.post",
        "summary": "Creates new volume",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVolume"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New volume",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/volumes/{volume_id}": {
      "get": {
        "operationId": "azure_service.api.volume.get",
        "summary": "Gets a single volume by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VolumeId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single volume identified by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "operationId": "azure_service.api.volume.patch",
        "summary": "Modify volume properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VolumeId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchVolume"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Volume was updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "operationId": "azure_service.api.volume.delete",
        "summary": "Removes volume",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VolumeId"
          }
        ],
        "responses": {
          "204": {
            "description": "Volume was removed successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/volumes/{volume_id}/attach": {
      "put": {
        "operationId": "azure_service.api.volume_attachment.put",
        "summary": "Attaches volume",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VolumeId"
          },
          {
            "$ref": "#/components/parameters/VMIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Volume attached to the VM successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeAttachment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/volumes/{volume_id}/detach": {
      "delete": {
        "operationId": "azure_service.api.volume_attachment.delete",
        "summary": "Dettaches volume",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VolumeId"
          },
          {
            "$ref": "#/components/parameters/VMIdQuery"
          }
        ],
        "responses": {
          "204": {
            "description": "Volume detached from the VM successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/volumeTypes": {
      "get": {
        "operationId": "azure_service.api.volume_types.get",
        "summary": "Lists volume types",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterIsOsCompatible"
          },
          {
            "$ref": "#/components/parameters/FilterAvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of volume types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "$ref": "#/components/schemas/VolumeType"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms/{vm_id}/assignFloatingIp": {
      "put": {
        "operationId": "azure_service.api.vm_floating_ip.put",
        "summary": "Assigns a floating public IP v4 to specified VM",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          }
        ],
        "responses": {
          "201": {
            "description": "Assigned floating IP to a VM",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VmFloatingIp"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms/{vm_id}/unassignFloatingIp": {
      "delete": {
        "operationId": "azure_service.api.vm_floating_ip.delete",
        "summary": "Unassigns floating public IP from specified VM",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          }
        ],
        "responses": {
          "204": {
            "description": "Unassigned floating IP from VM"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms/{vm_id}/securityGroups/{security_group_id}": {
      "put": {
        "operationId": "azure_service.api.vm_security_groups.put",
        "summary": "Assigns a new network security group and unassigns old one",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          },
          {
            "$ref": "#/components/parameters/SecurityGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "Security group is already assigned to VM"
          },
          "201": {
            "description": "Assigned security group to a VM and unasigned old one"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "operationId": "azure_service.api.vm_security_groups.delete",
        "summary": "Unassigns specified security group from specified VM",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          },
          {
            "$ref": "#/components/parameters/SecurityGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "Security group is not assign to this VM"
          },
          "204": {
            "description": "Unassigned security group from a VM"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms/{vm_id}/setTag": {
      "put": {
        "operationId": "azure_service.api.vm_tag.put",
        "summary": "Sets/unsets tag in virtual machine",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VMId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdate"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Tag successfully set/unset in VM"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/keypairs": {
      "get": {
        "operationId": "azure_service.api.keypairs.get",
        "summary": "Lists keypairs",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterAvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of keypairs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "$ref": "#/components/schemas/Keypair"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/keypairs/{keypair_id}": {
      "get": {
        "operationId": "azure_service.api.keypair.get",
        "summary": "Gets a single keypair",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/KeypairId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single keypair",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "operationId": "azure_service.api.keypair.delete",
        "summary": "Delets a single keypair",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/KeypairId"
          }
        ],
        "responses": {
          "204": {
            "description": "Keypair was deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/keypairs/generate": {
      "post": {
        "operationId": "azure_service.api.keypair_generate.post",
        "summary": "Generate a new keypair",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeypairGenerate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generated keypair",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedKeypair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/keypairs/import": {
      "post": {
        "operationId": "azure_service.api.keypair_import.post",
        "summary": "Import a public key",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeypairImport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generated keypair",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/networks": {
      "get": {
        "operationId": "azure_service.api.networks.get",
        "summary": "List networks for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterAvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of networks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Network"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/networks/{network_id}/subnets": {
      "get": {
        "operationId": "azure_service.api.network_subnets.get",
        "summary": "Lists subnets for specified network and subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/NetworkId"
          },
          {
            "$ref": "#/components/parameters/FilterAvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of subnets for specified network",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subnet"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/interfaces": {
      "get": {
        "operationId": "azure_service.api.interfaces.get",
        "summary": "Lists interfaces for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterVMId"
          },
          {
            "$ref": "#/components/parameters/FilterNetworkId"
          },
          {
            "$ref": "#/components/parameters/FilterSubnetId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of interfaces",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Interface"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/securityGroups": {
      "get": {
        "operationId": "azure_service.api.security_groups.get",
        "summary": "Lists security groups for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterVMId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of security groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityGroup"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/snapshots": {
      "get": {
        "summary": "Get list of all snapshots",
        "operationId": "azure_service.api.snapshots.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterVMId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Snapshot"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Create a new snapshot",
        "operationId": "azure_service.api.snapshots.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "description": "A create snapshot object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSnapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Snapshot created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/snapshots/{snapshot_id}": {
      "delete": {
        "summary": "Delete snapshot",
        "operationId": "azure_service.api.snapshot.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/SnapshotId"
          }
        ],
        "responses": {
          "204": {
            "description": "Snapshot deleted successfully"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "408": {
            "$ref": "#/components/responses/Timeout"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "SubscriptionId": {
        "name": "subscriptionId",
        "in": "query",
        "description": "ID of subscription",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SubscriptionId"
        }
      },
      "OptionalSubscriptionId": {
        "name": "subscriptionId",
        "in": "query",
        "description": "Optional ID of subscription",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/SubscriptionId"
        }
      },
      "VMId": {
        "name": "vm_id",
        "in": "path",
        "description": "ID of VM",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/VMId"
        }
      },
      "VMIdQuery": {
        "name": "vmId",
        "in": "query",
        "description": "ID of VM in query string",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/VMId"
        }
      },
      "VMPowerAction": {
        "name": "action",
        "in": "path",
        "required": true,
        "description": "Commands for the VM",
        "schema": {
          "$ref": "#/components/schemas/VMPowerAction"
        }
      },
      "FlavorId": {
        "name": "flavor_id",
        "in": "path",
        "description": "ID of Flavor",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/FlavorId"
        }
      },
      "VolumeId": {
        "name": "volume_id",
        "in": "path",
        "description": "ID of Volume",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/VolumeId"
        }
      },
      "ImageName": {
        "name": "name",
        "in": "query",
        "description": "Full/partial name of an image to look for",
        "required": false,
        "schema": {
          "type": "string",
          "minLength": 1
        }
      },
      "KeypairId": {
        "name": "keypair_id",
        "in": "path",
        "description": "Id of the keypair",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/KeypairId"
        }
      },
      "NetworkId": {
        "name": "network_id",
        "in": "path",
        "required": true,
        "description": "ID of network",
        "schema": {
          "$ref": "#/components/schemas/NetworkId"
        }
      },
      "ImageId": {
        "name": "image_id",
        "in": "path",
        "description": "Image id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ImageId"
        }
      },
      "SecurityGroupId": {
        "name": "security_group_id",
        "in": "path",
        "required": true,
        "description": "Security group id",
        "schema": {
          "$ref": "#/components/schemas/SecurityGroupId"
        }
      },
      "AvailabilitySetId": {
        "name": "availability_set_id",
        "in": "path",
        "required": true,
        "description": "Availability Set ID",
        "schema": {
          "$ref": "#/components/schemas/AvailabilitySetId"
        }
      },
      "FilterAvailabilitySetId": {
        "name": "availabilitySetId",
        "in": "query",
        "required": false,
        "description": "Availability Set ID",
        "schema": {
          "$ref": "#/components/schemas/AvailabilitySetId"
        }
      },
      "FilterVMId": {
        "name": "vmId",
        "in": "query",
        "description": "Vm id to filter by",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/VMId"
        }
      },
      "FilterNetworkId": {
        "name": "networkId",
        "in": "query",
        "description": "Network id to filter by",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/NetworkId"
        }
      },
      "FilterSubnetId": {
        "name": "subnetId",
        "in": "query",
        "description": "Subnet id to filter by",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/SubnetId"
        }
      },
      "FilterAvailabilityZone": {
        "name": "availabilityZone",
        "in": "query",
        "description": "Availibility zone to filter by",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/AvailabilityZoneId"
        }
      },
      "FilterAvailabilityZoneId": {
        "name": "availabilityZoneId",
        "in": "query",
        "description": "Availibility zone id to filter by",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/AvailabilityZoneId"
        }
      },
      "FilterVolumeStatus": {
        "name": "status",
        "in": "query",
        "required": false,
        "description": "Volume status to filter by",
        "schema": {
          "$ref": "#/components/schemas/VolumeStatus"
        }
      },
      "FilterIsOsDisk": {
        "name": "isOsDisk",
        "in": "query",
        "description": "Filter volumes by IsOsDisk value",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/IsOsDisk"
        }
      },
      "FilterIsOsCompatible": {
        "name": "isOsCompatible",
        "in": "query",
        "description": "Filter volumes by OS compatibility",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/IsOsCompatible"
        }
      },
      "SnapshotId": {
        "name": "snapshot_id",
        "in": "path",
        "description": "snapshot ID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SnapshotId"
        }
      }
    },
    "schemas": {
      "VMId": {
        "type": "string",
        "format": "vmId",
        "example": "MY-RESOURCE-GROUP~my-azure-vm"
      },
      "ResourceGroupId": {
        "type": "string",
        "example": "MY-RESOURCE_GROUP"
      },
      "InterfaceId": {
        "type": "string",
        "format": "interfaceId",
        "example": "MY-RESOURCE-GROUP~my-azure-interface"
      },
      "VolumeId": {
        "type": "string",
        "format": "volumeId",
        "example": "MY-RESOURCE-GROUP~my-azure-volume"
      },
      "SubscriptionId": {
        "type": "string",
        "format": "uuid",
        "example": "75e0fc6a-1675-4e90-9d5e-3d004dc3e4ff"
      },
      "AvailabilityZoneId": {
        "type": "string",
        "example": "default",
        "default": "default"
      },
      "AvailabilitySetId": {
        "type": "string",
        "format": "availabilitySetId",
        "example": "MY-RESOURCE-GROUP~my-azure-availability-set"
      },
      "RegionId": {
        "type": "string",
        "example": "eastasia",
        "readOnly": true,
        "description": "ID of the region"
      },
      "ImageId": {
        "type": "string",
        "example": "my_pubslisher:my_offer:my_sku",
        "minLength": 1
      },
      "FlavorId": {
        "type": "string",
        "example": "Standard_A1"
      },
      "VolumeTypeId": {
        "type": "string",
        "example": "Premium_LRS",
        "enum": [
          "Premium_LRS",
          "Standard_LRS",
          "StandardSSD_LRS"
        ]
      },
      "NetworkId": {
        "type": "string",
        "format": "networkId",
        "example": "MY-RESOURCE-GROUP~my-azure-network"
      },
      "SubnetId": {
        "type": "string",
        "format": "subnetId",
        "example": "MY-RESOURCE-GROUP~my-azure-network~my-azure-subnet"
      },
      "KeypairId": {
        "type": "string",
        "example": "private-key",
        "minLength": 1,
        "maxLength": 60,
        "pattern": "^[a-zA-Z0-9_-]+$"
      },
      "KeypairName": {
        "type": "string",
        "example": "private-key",
        "minLength": 1,
        "maxLength": 60,
        "pattern": "^[a-zA-Z0-9_-]+$"
      },
      "Ipv4AddressId": {
        "type": "string",
        "format": "ipv4AddressId",
        "example": "MY-RESOURCE-GROUP~my-azure-ipv4-address-id"
      },
      "SecurityGroupId": {
        "type": "string",
        "format": "securityGroupId",
        "example": "Default-Networking~FCSMOMSTest2-nsg"
      },
      "ManagementToolId": {
        "type": "string",
        "format": "uuid",
        "example": "38d07fe2-eae2-4fcf-af67-90180a2b636e"
      },
      "SnapshotId": {
        "type": "string",
        "format": "snapshotId",
        "example": "MY-RESOURCE-GROUP~my-azure-snapshot"
      },
      "Snapshot": {
        "type": "object",
        "required": [
          "id",
          "vmId",
          "name",
          "createdAt",
          "description"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SnapshotId"
          },
          "vmId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "datetime",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateSnapshot": {
        "type": "object",
        "required": [
          "vmId",
          "name",
          "description"
        ],
        "properties": {
          "vmId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Region": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/RegionId"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "East Asia"
          }
        },
        "example": {
          "id": "eastasia",
          "name": "East Asia"
        }
      },
      "PublicPrivateImage": {
        "type": "object",
        "description": "An image that can be used to provision virtual machine",
        "required": [
          "id",
          "name",
          "minDiskInGb",
          "maxDiskInGb",
          "minRamInMb",
          "isPrivate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ImageId"
          },
          "name": {
            "type": "string",
            "example": "my_publisher - my_offer - my_sku",
            "readOnly": true,
            "minLength": 1
          },
          "minDiskInGb": {
            "type": "integer",
            "example": 128,
            "readOnly": true,
            "minimum": 1
          },
          "maxDiskInGb": {
            "type": "integer",
            "example": 128,
            "readOnly": true,
            "minimum": 1
          },
          "minRamInMb": {
            "type": "integer",
            "example": 1024,
            "readOnly": true,
            "minimum": 1
          },
          "isPrivate": {
            "type": "boolean",
            "example": false,
            "readOnly": true
          }
        }
      },
      "AvailabilityZone": {
        "type": "object",
        "required": [
          "id",
          "name",
          "isAvailable"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AvailabilityZoneId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "isAvailable": {
            "type": "boolean",
            "readOnly": true
          },
          "available": {
            "type": "boolean",
            "deprecated": true,
            "readOnly": true
          }
        },
        "example": {
          "id": "default",
          "name": "Default",
          "isAvailable": true,
          "available": true
        }
      },
      "AvailabilitySet": {
        "type": "object",
        "required": [
          "id",
          "name",
          "resourceGroupId"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AvailabilitySetId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "resourceGroupId": {
            "$ref": "#/components/schemas/ResourceGroupId",
            "readOnly": true
          }
        }
      },
      "Flavor": {
        "type": "object",
        "required": [
          "id",
          "name",
          "ramInMb",
          "vcpus",
          "diskInGb",
          "compatibleVolumeTypeIds"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/FlavorId"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "Standard A1"
          },
          "ramInMb": {
            "type": "integer",
            "readOnly": true,
            "description": "Amount of memory supported by virtual machine with this flavor",
            "example": 100
          },
          "vcpus": {
            "type": "integer",
            "readOnly": true,
            "description": "Amount of VCPUs supported by virtual machine with this flavor",
            "example": 1
          },
          "diskInGb": {
            "type": "integer",
            "readOnly": true,
            "description": "Highest OS volume size allowed for virtual machines with this flavor",
            "example": 10
          },
          "ephemeralDiskInGb": {
            "type": "integer",
            "readOnly": true,
            "description": "Highest data volume size allowed for virtual machines with this flavor",
            "example": 10
          },
          "compatibleVolumeTypeIds": {
            "type": "array",
            "minItems": 1,
            "readOnly": true,
            "description": "List of volume types that can be attached to this virtual machine as data volumes",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VolumeTypeId"
                },
                {
                  "uniqueItems": true
                }
              ]
            }
          }
        }
      },
      "VMSimple": {
        "type": "object",
        "required": [
          "id",
          "name",
          "isManaged",
          "managementToolId",
          "flavorId",
          "imageId",
          "powerState",
          "availabilityZoneId",
          "availabilityZone",
          "tags"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/VMId"
          },
          "name": {
            "type": "string"
          },
          "isManaged": {
            "type": "boolean",
            "deprecated": true
          },
          "managementToolId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ManagementToolId"
              },
              {
                "nullable": true
              }
            ]
          },
          "flavorId": {
            "$ref": "#/components/schemas/FlavorId"
          },
          "imageId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ImageId"
              },
              {
                "nullable": true
              }
            ]
          },
          "powerState": {
            "type": "string",
            "enum": [
              "unknown",
              "running",
              "stopped",
              "pending"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "datetime",
            "readOnly": true,
            "nullable": true
          },
          "availabilityZoneId": {
            "$ref": "#/components/schemas/AvailabilityZoneId"
          },
          "availabilityZone": {
            "description": "Deprecated after 3 months. Please use `availabilityZoneId`",
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailabilityZoneId"
              },
              {
                "deprecated": true
              }
            ]
          },
          "availabilitySetId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AvailabilitySetId"
              },
              {
                "nullable": true
              }
            ]
          },
          "tags": {
            "type": "array",
            "minItems": 0,
            "maxItems": 15,
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "example": {
          "id": "MY-RESOURCE-GROUP~my-azure-vm",
          "name": "my-azure-vm",
          "isManaged": false,
          "managementToolId": null,
          "flavorId": "Standard_A1",
          "imageId": "Canonical.UbuntuServer1404LTS-ARM.1.0.54",
          "powerState": "stopped",
          "availabilitySetId": "MY-RESOURCE-GROUP~my-super-set",
          "tags": []
        }
      },
      "VMExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VMSimple"
          },
          {
            "type": "object",
            "required": [
              "interfaceIds",
              "volumeIds",
              "allowedPowerActions",
              "status"
            ],
            "properties": {
              "interfaceIds": {
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/InterfaceId"
                }
              },
              "interfaces": {
                "type": "array",
                "description": "Deprecated after 3 months. Please use `interfaceIds`",
                "deprecated": true,
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/InterfaceId"
                }
              },
              "volumeIds": {
                "type": "array",
                "uniqueItems": true,
                "minItems": 1,
                "description": "List will contain at least one item which will be an ID\nof the OS volume virtual machine boots from\n",
                "items": {
                  "$ref": "#/components/schemas/VolumeId"
                }
              },
              "volumes": {
                "type": "array",
                "description": "Deprecated after 3 months. Please use `volumeIds`",
                "deprecated": true,
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/VolumeId"
                }
              },
              "allowedPowerActions": {
                "type": "array",
                "readOnly": true,
                "minItems": 0,
                "maxItems": 3,
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/VMPowerAction"
                }
              },
              "status": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "ok",
                  "error",
                  "pending"
                ]
              },
              "statusMessage": {
                "type": "string",
                "readOnly": true,
                "nullable": true
              },
              "workshift": {
                "$ref": "#/components/schemas/OptionalWorkshift"
              }
            },
            "example": {
              "id": "MY-RESOURCE-GROUP~my-azure-vm",
              "name": "my-azure-vm",
              "isManaged": false,
              "flavorId": "Standard_A1",
              "imageId": "Canonical.UbuntuServer1404LTS-ARM.1.0.54",
              "powerState": "running",
              "interfaceIds": [
                "nic-my-auzre-vm-DefaultNetworkingvn404"
              ],
              "volumeIds": [
                "PROVISIONING-TEST~my-azure-vm_OsDisk_1_8d07c99dc9284284b9ead23870579161"
              ],
              "allowedPowerActions": [
                "poweroff",
                "softReboot",
                "hardReboot"
              ],
              "status": "ok",
              "workshift": null
            }
          }
        ]
      },
      "VMCreateData": {
        "type": "object",
        "required": [
          "name",
          "imageId",
          "flavorId",
          "keypairId",
          "volumeSize",
          "volumeTypeId",
          "tags",
          "resourceGroupId"
        ],
        "description": "Provisioning properties for virtual machine. Note the deprecated fields. Look at the descriptions of each deprecated field to see their valid counterparts. Having both, deprecated and valid, fields present in the request is treated as an error with the exception for \"securityGroupIds\" aliasing \"securityGroups\" and \"availabilityZoneId\" aliasing \"availabilityZone\".\nConstraints:\n- \"flavorId\" - flavor identifier must point to a valid flavor that is\n  compatible with selected image (via \"imageId\") and selected\n  volumeType (via \"volumeTypeId\"). Also, if you are trying to provision a managed VM\n  with Windows operating system flavor should have at least 3.5GB of RAM.\n- \"imageId\" - image identifier defined in whitelist for Azure subscription.\n  Image ID must point to a valid image therefore it must exist,\n  have a known operating system and have a non empty list of\n  compatible flavors.\n- \"keypairId\" - keypair identifier. Works differently, based on on OS of the image\n  (via \"imageId\"). For Windows machines it is used to encrypt the initial password to log in to the machine.\n  For linux machines it is used as a SSH key that is uploaded to the machine\n- \"volumeTypeId\" - A type of the OS volume. It has point to valid volume type\n  therefore it must exist and have a list of known compatible flavors\n- \"volumeSize\" - size of the OS volume. Note that the size cannot be larger than\n  1000GB and smaller than minimum disk size defined by an image (via \"imageId\")\n- \"tags\"- tags (name and value) to be assigned to this VM. This list can be empty if\n  you opt out from tagging the virtual machine. However, if there are\n  required tags defined in the system, all of those have to be included here. This list cannot\n  contain duplicated tags (via \"name\") and all \"name\"s as well as each \"value\" assigned to it must be known\n  to the system. Provided any of those prerequisites is not met, an error is returned.\n- \"workshift\"- This can be set or not. Note that it must be set and\n  match the workshift defined in subscription if the latter\n  enforces it as well it must not be set if the subscription disallows workshifts. If you are unsure as to\n  what is permitted here, you may consult a workshift policy defined for your subscription\n\nImplementation details:\n- access via password is not set for Linux machines, only SSH-ing into\n  the machine is enabled\n- if VM is to be managed, a special agent is installed on the machine to\n  enable any operations, such as application installation\n",
        "properties": {
          "name": {
            "type": "string",
            "example": "my-azure-vm-1",
            "pattern": "^(?!-)[A-Za-z0-9-_]{1,63}(?<!-)$"
          },
          "resourceGroupId": {
            "$ref": "#/components/schemas/ResourceGroupId"
          },
          "flavorId": {
            "$ref": "#/components/schemas/FlavorId"
          },
          "imageId": {
            "$ref": "#/components/schemas/ImageId"
          },
          "keypairId": {
            "$ref": "#/components/schemas/KeypairId"
          },
          "volumeSize": {
            "type": "integer",
            "example": 30,
            "maximum": 1000
          },
          "volumeTypeId": {
            "$ref": "#/components/schemas/VolumeTypeId"
          },
          "tags": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 0,
            "maxItems": 15,
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "workshift": {
            "$ref": "#/components/schemas/OptionalWorkshift"
          },
          "securityGroups": {
            "type": "array",
            "deprecated": true,
            "description": "\"securityGroups\" is deprecated in favor of \"securityGroupIds\" and will be removed in 3 months.",
            "uniqueItems": true,
            "minItems": 0,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/SecurityGroupId"
            }
          },
          "securityGroupIds": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 0,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/SecurityGroupId"
            }
          },
          "avalabilityZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailabilityZoneId"
              },
              {
                "deprecated": true,
                "description": "\"availabilityZone\" is deprecated in favor of \"availabilityZoneId\" and will be removed in 3 months."
              }
            ]
          },
          "availabilityZoneId": {
            "$ref": "#/components/schemas/AvailabilityZoneId"
          },
          "availabilitySetId": {
            "$ref": "#/components/schemas/AvailabilitySetId"
          },
          "nics": {
            "type": "array",
            "deprecated": true,
            "description": "\"nics\" is deprecated in favor of \"subnetId\" and will be removed in 3 months.",
            "uniqueItems": true,
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/NetworkId"
            }
          },
          "subnetId": {
            "$ref": "#/components/schemas/SubnetId"
          },
          "managementEnabled": {
            "type": "boolean",
            "deprecated": true,
            "example": true,
            "description": "\"managementEnabled\" is deprecated in favor of \"managementToolId\" and will be removed in 3 months."
          },
          "managementToolId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ManagementToolId"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "VMPowerAction": {
        "type": "string",
        "uniqueItems": true,
        "enum": [
          "start",
          "poweroff",
          "softReboot",
          "hardReboot"
        ]
      },
      "VolumeAttachment": {
        "type": "object",
        "nullable": true,
        "required": [
          "device",
          "vmId"
        ],
        "properties": {
          "device": {
            "type": "string",
            "example": "/lun/0",
            "description": "lun/{number} path is for data volume and /os path is for OS volumes\n"
          },
          "vmId": {
            "$ref": "#/components/schemas/VMId"
          }
        }
      },
      "Volume": {
        "type": "object",
        "required": [
          "id",
          "name",
          "createdAt",
          "sizeInGb",
          "status",
          "typeId",
          "isOsDisk",
          "tags",
          "attachment",
          "availabilityZoneId"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/VolumeId"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 300,
            "pattern": "^[?\\.|a-zA-Z0-9_-]+$"
          },
          "createdAt": {
            "type": "string",
            "format": "datetime",
            "readOnly": true
          },
          "sizeInGb": {
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/VolumeStatus"
          },
          "typeId": {
            "$ref": "#/components/schemas/VolumeTypeId"
          },
          "isOsDisk": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 0,
            "maxItems": 15,
            "description": "Tags (name and value) assigned to this Volume",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "availabilityZoneId": {
            "$ref": "#/components/schemas/AvailabilityZoneId"
          },
          "attachment": {
            "$ref": "#/components/schemas/VolumeAttachment"
          }
        },
        "example": {
          "id": "PROVISIONING-TEST",
          "createdAt": "test-test",
          "sizeInGb": 120,
          "status": "available",
          "name": "name-test",
          "availabilityZone": "test-test",
          "typeId": "test-test",
          "isOsDisk": false
        }
      },
      "Tag": {
        "type": "object",
        "description": "Tag that is assigned to the virtual machine",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier (name) of the tag"
          },
          "value": {
            "type": "string",
            "description": "Assigned value of the tag"
          }
        }
      },
      "TagUpdate": {
        "type": "object",
        "description": "Tag update data. It will unset tag from a VM if null value is passed.",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier (name) of the tag"
          },
          "value": {
            "type": "string",
            "description": "Assigned value of the tag",
            "nullable": true
          }
        }
      },
      "Workshift": {
        "type": "object",
        "description": "Workshift for this VM composed out of start (when to start) and stop (when to stop) virtual machine\n",
        "required": [
          "start",
          "stop"
        ],
        "properties": {
          "start": {
            "$ref": "#/components/schemas/WorkshiftSchedule"
          },
          "stop": {
            "$ref": "#/components/schemas/WorkshiftSchedule"
          }
        }
      },
      "OptionalWorkshift": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Workshift"
          },
          {
            "type": "object",
            "nullable": true
          }
        ]
      },
      "WorkshiftSchedule": {
        "type": "object",
        "description": "Describes when power state of a VM should be affected. It is composed out of hour:minute and list of days when aforementioned power state change should happen\n",
        "required": [
          "hour",
          "minute",
          "days"
        ],
        "properties": {
          "minute": {
            "type": "integer",
            "minimum": 0,
            "maximum": 59
          },
          "hour": {
            "type": "integer",
            "minimum": 0,
            "maximum": 23
          },
          "days": {
            "type": "array",
            "description": "Set of days when workshift should be applied. It has to contain at least one day and cannot contain duplicates.\n",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "mon",
                "tue",
                "wed",
                "thu",
                "fri",
                "sat",
                "sun"
              ]
            },
            "uniqueItems": true,
            "example": [
              "mon",
              "sun"
            ]
          }
        }
      },
      "Keypair": {
        "type": "object",
        "required": [
          "id",
          "name",
          "fingerprint",
          "publicKey"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/KeypairId"
          },
          "name": {
            "$ref": "#/components/schemas/KeypairName"
          },
          "fingerprint": {
            "type": "string",
            "description": "Keypair fingerprint, synonymous to the SSH fingerprint.\n",
            "readOnly": true
          },
          "publicKey": {
            "type": "string",
            "description": "Public part of the keypair, synonymous to the SSH public key.\n",
            "readOnly": true
          }
        }
      },
      "KeypairGenerate": {
        "type": "object",
        "description": "Requests body to generate a keypair. The public and private keys will be generated for the user.\n",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/KeypairName"
          }
        },
        "example": {
          "name": "my-generated-keypair"
        }
      },
      "KeypairImport": {
        "type": "object",
        "description": "Requests body to import a keypair.\n",
        "required": [
          "name",
          "publicKey"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/KeypairName"
          },
          "publicKey": {
            "type": "string",
            "description": "Keypair public key synonymous to the SSH public key\n"
          }
        },
        "example": {
          "name": "my-imported-keypair",
          "publicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDQzRJEGYzFGdzxWDUxYLc mmwUHuWCRrLkXYgj0DljCxHstHr/VKssSMuF02FqwPb5/9Phrl5cajpWiB7baC2Gkzw3ZyQdnanIFqp 9SqIbCPjd1LsU57FF/t/C99snD6gZTYXoufMHGOAl1Vt6+PNXfFekJXgTnRgDlxggnWMoLGiUJpbkyq MnBcrPVnVLYThV1WuOeXmyYhLj4EK2Qvs33OsCT5CBwYie3AfkK9+Ti/zga7LAWUBOOMBf6+bqJQWRT uQ4ayfWrFOhsosiA2C1F+8M0LVX+MiZtho/Kev352NJbGt8+wLSSLxrb+aqNZnmieClweS1w46f9hIY lS4gFOzAM9iS9XcNyChsaENTvktHpW1jSCErnEW1xbvg+7TMCJ0RYOtxiRW9GZQffDwUXU1CJCNIfQ9 1w/RqVsvnYzLOu4OunKR5HKPuWIF/WFFp1kRbetM1MuvV2YrXFYI7+OgPOL3VPlzPDYdXDhsPFVeObx E1T2W3PB/p7OAcFYJRVOoHrY74M+c3lvWicdL7QfZRNnPVnWhJiMFxCMK+G43xcsKVgJH05HW+PLcGJ D6SdgDrY2eE6rYATVpo0az52s+jTqNCyqCX2G9T01wAyK50/a5Ivo7s804cQT0yQuB6dGstx1cDwgJh ayy8V3pruJn19I7fE5/KmrwInGv8nFw==\n"
        }
      },
      "GeneratedKeypair": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Keypair"
          },
          {
            "type": "object",
            "description": "Remember that private keypair must be downloaded/saved on the disk in order to use it when accessing the virtual machine or decoding its password. It will not be possible to retrieve later.\n",
            "required": [
              "privateKey"
            ],
            "properties": {
              "privateKey": {
                "type": "string",
                "description": "Private part of the keypair, synonymous to the SSH private key.",
                "readOnly": true
              }
            }
          }
        ]
      },
      "IsOsDisk": {
        "type": "boolean",
        "example": true
      },
      "IsOsCompatible": {
        "type": "boolean",
        "example": true
      },
      "VolumeStatus": {
        "type": "string",
        "enum": [
          "available",
          "inUse",
          "error",
          "unknown"
        ]
      },
      "VolumeType": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/VolumeTypeId"
          },
          "name": {
            "type": "string"
          },
          "minVolumeSizeInGb": {
            "type": "integer"
          },
          "maxVolumeSizeInGb": {
            "type": "integer"
          },
          "isOsCompatible": {
            "$ref": "#/components/schemas/IsOsCompatible"
          }
        },
        "example": {
          "id": "PROVISIONING-TEST~volume-name",
          "name": "volume-name",
          "minVolumeSizeInGb": 1,
          "maxVolumeSizeInGb": 1024,
          "isOsCompatible": false
        }
      },
      "CreateVolume": {
        "type": "object",
        "required": [
          "name",
          "size",
          "typeId",
          "resourceGroupId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 60,
            "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9_.-]*\\w$"
          },
          "size": {
            "type": "integer"
          },
          "typeId": {
            "$ref": "#/components/schemas/VolumeTypeId"
          },
          "resourceGroupId": {
            "$ref": "#/components/schemas/ResourceGroupId"
          },
          "availabilityZoneId": {
            "$ref": "#/components/schemas/AvailabilityZoneId"
          },
          "availabilityZone": {
            "description": "Deprecated after 3 months. Please use `availabilityZoneId`",
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailabilityZoneId"
              },
              {
                "deprecated": true
              }
            ]
          },
          "vmId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VMId"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "PatchVolume": {
        "type": "object",
        "required": [
          "sizeInGb"
        ],
        "properties": {
          "sizeInGb": {
            "type": "integer"
          }
        }
      },
      "Network": {
        "type": "object",
        "required": [
          "id",
          "name",
          "addressPrefix"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "addressPrefix": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Subnet": {
        "type": "object",
        "required": [
          "id",
          "name",
          "cidr"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SubnetId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "cidr": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "IPv4Address": {
        "type": "object",
        "required": [
          "id",
          "name",
          "allowedActions",
          "isDirectlyAssociated",
          "isFloating",
          "isPublic"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Ipv4AddressId"
          },
          "ip": {
            "type": "string",
            "format": "ip",
            "readOnly": true,
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "allowedActions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isDirectlyAssociated": {
            "type": "boolean",
            "readOnly": true
          },
          "isFloating": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "dnsName": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          }
        }
      },
      "InterfaceAttachment": {
        "type": "object",
        "required": [
          "vmId",
          "subnetId"
        ],
        "properties": {
          "vmId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VMId"
              },
              {
                "nullable": true
              }
            ]
          },
          "subnetId": {
            "$ref": "#/components/schemas/SubnetId"
          }
        }
      },
      "Interface": {
        "type": "object",
        "required": [
          "id",
          "name",
          "primary",
          "networkId",
          "networkName",
          "ipv4Addresses",
          "attachment"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/InterfaceId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "primary": {
            "type": "boolean",
            "readOnly": true
          },
          "macAddress": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "networkId": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "networkName": {
            "type": "string",
            "readOnly": true
          },
          "ipv4Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPv4Address"
            }
          },
          "attachment": {
            "$ref": "#/components/schemas/InterfaceAttachment"
          }
        }
      },
      "SecurityGroup": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SecurityGroupId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "VmFloatingIp": {
        "type": "object",
        "required": [
          "id",
          "floatingIpAddress",
          "interfaceId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "floatingIpAddress": {
            "type": "string",
            "readOnly": true,
            "example": "135.23.22.134",
            "format": "ip"
          },
          "interfaceId": {
            "$ref": "#/components/schemas/InterfaceId"
          }
        }
      },
      "ManagementStatus": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "available",
              "notAvailable",
              "notEnabled"
            ]
          }
        }
      },
      "ResourceGroup": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "my-resource-group"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "my-resource-group"
          }
        }
      },
      "CreateResourceGroup": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[?\\.|a-zA-Z0-9_-]+$"
          }
        }
      },
      "VmDetails": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "readOnly": true,
            "example": "Availability Zone"
          },
          "value": {
            "type": "string",
            "readOnly": true,
            "example": "default"
          }
        }
      },
      "EncryptedPassword": {
        "type": "object",
        "required": [
          "encryptedPassword"
        ],
        "properties": {
          "encryptedPassword": {
            "type": "string",
            "readOnly": true,
            "example": "my-password"
          }
        }
      },
      "VMPatch": {
        "type": "object",
        "properties": {
          "flavorId": {
            "$ref": "#/components/schemas/FlavorId"
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "An error response",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Subscription": {
        "type": "object",
        "required": [
          "regionId",
          "spUsername",
          "spPassword",
          "platformSubscriptionId",
          "tenantId"
        ],
        "properties": {
          "regionId": {
            "type": "string",
            "example": "eastasia"
          },
          "spUsername": {
            "type": "string",
            "example": "sample-user"
          },
          "spPassword": {
            "type": "string",
            "example": "my-password"
          },
          "platformSubscriptionId": {
            "type": "string",
            "example": "aderdcdd-f85e-432-b1ea-yeh0sdh9be"
          },
          "tenantId": {
            "type": "string",
            "example": "aderdcdd-f85e-432-b1ea-yeh0sdh9be"
          }
        }
      }
    },
    "responses": {
      "VMExtended": {
        "description": "Single virtual machine identified by ID",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VMExtended"
            }
          }
        }
      },
      "Timeout": {
        "description": "There was a timeout when processing the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Object was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Resource is not in desired state",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Server was able to read the request but the instructions are not correct",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "Service is unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnexpectedError": {
        "description": "Service encountered an error it does not know how to handle",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}