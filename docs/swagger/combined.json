{
  "openapi": "3.0.0",
  "info": {
    "title": "Combined FCSM EOS API",
    "version": "1.2.0"
  },
  "servers": [
    {
      "url": "https://emeia-eos.fcsm.io"
    }
  ],
  "paths": {
    "/api/v1/analytics/metrics": {
      "get": {
        "description": "Retrieve all metrics",
        "operationId": "get_metrics",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date for showing metrics (YYYY-MM-DD)",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for showing metrics (YYYY-MM-DD)",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all metrics",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/analytics.Metrics"
                }
              }
            }
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/api/v1/analytics/platforms/{platformId}": {
      "get": {
        "description": "Retrieve metrics for specific platform",
        "operationId": "get_platform_metrics",
        "parameters": [
          {
            "name": "platformId",
            "in": "path",
            "required": true,
            "description": "ID of platform",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics for one platform",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/analytics.PlatformMetrics"
                }
              }
            }
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/api/v1/analytics/summary": {
      "get": {
        "description": "Retrieve usage summary",
        "operationId": "get_summary",
        "responses": {
          "200": {
            "description": "Summary response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/analytics.Summary"
                }
              }
            }
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/api/v1/analytics/summaryUsage": {
      "get": {
        "description": "Retrieve usage summary for all platforms",
        "operationId": "get_summary_usage",
        "responses": {
          "200": {
            "description": "Summarized usage of resources",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/analytics.SummaryUsage"
                }
              }
            }
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/api/v1/analytics/platformsUsage": {
      "get": {
        "description": "Retrieve percentage platforms usage",
        "operationId": "get_platforms_usage",
        "responses": {
          "200": {
            "description": "Response may be empty object if all platforms are disabled",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/analytics.PlatformsUsage"
                }
              }
            }
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/api/v1/analytics/operatingSystems": {
      "get": {
        "description": "Retrieve information about operating systems in use",
        "operationId": "get_operating_systems",
        "responses": {
          "200": {
            "description": "Response may be empty list if all platforms are disabled",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/analytics.OperatingSystems"
                }
              }
            }
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/api/v1/auth/externalProviders": {
      "get": {
        "description": "List of configured external identity providers",
        "operationId": "getExternalProviders",
        "responses": {
          "200": {
            "description": "List of providers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.SamlConfigs"
                }
              }
            }
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Forbidden"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.UnexpectedError"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      },
      "parameters": [
        {
          "in": "header",
          "name": "role",
          "schema": {
            "type": "string",
            "enum": [
              "admin",
              "user"
            ]
          }
        }
      ],
      "post": {
        "description": "Adds new external identity provider for saml",
        "operationId": "addExternalProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.SamlConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Saml IdP provider added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.SamlConfig"
                }
              }
            }
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Forbidden"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.UnexpectedError"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/auth/externalProviders/{providerId}": {
      "delete": {
        "description": "Delete external identity provider",
        "operationId": "deleteExternalProvider",
        "responses": {
          "200": {
            "description": "Provider deleted successfully"
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Forbidden"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.UnexpectedError"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      },
      "get": {
        "description": "Configured external identity provider by id",
        "operationId": "getExternalProvider",
        "responses": {
          "200": {
            "description": "Providers configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.SamlConfig"
                }
              }
            }
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Provider with this id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.NotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.UnexpectedError"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      },
      "parameters": [
        {
          "in": "header",
          "name": "role",
          "schema": {
            "type": "string",
            "enum": [
              "admin",
              "user"
            ]
          }
        },
        {
          "in": "path",
          "name": "providerId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/auth/login": {
      "post": {
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Token"
                }
              }
            }
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Incorrect credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InvalidCredentials"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.UnexpectedError"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/user/checkCredentials": {
      "post": {
        "operationId": "checkCredentials",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user with those credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.User"
                }
              }
            }
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidCredentials"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/forgotPassword": {
      "post": {
        "operationId": "forgotPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.ForgottenPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset request successfully received"
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Cannot send the password reset email or database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/me": {
      "get": {
        "operationId": "getMe",
        "parameters": [
          {
            "in": "header",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.User"
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/removeSubscription": {
      "delete": {
        "operationId": "removeSubscription",
        "parameters": [
          {
            "in": "header",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          },
          {
            "in": "header",
            "name": "external",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.SubscriptionID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully deleted subscription"
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Unknown subscription id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.NotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/resetPassword": {
      "post": {
        "operationId": "resetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.PasswordReset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password successfully reset"
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidCredentials"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/users": {
      "get": {
        "operationId": "getUsers",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All users in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Users"
                }
              }
            }
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Forbidden"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": [
        {
          "in": "header",
          "name": "role",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "admin",
              "user"
            ]
          }
        }
      ],
      "post": {
        "operationId": "createUser",
        "parameters": [
          {
            "in": "header",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly created user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.User"
                }
              }
            }
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Forbidden"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Cannot send the password reset email or database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/users/{user_id}": {
      "delete": {
        "operationId": "deleteUser",
        "parameters": [
          {
            "in": "header",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the user"
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required and admins cannot delete themselves",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Unknown user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.NotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "get": {
        "operationId": "getUser",
        "parameters": [
          {
            "in": "header",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user with the given user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.User"
                }
              }
            }
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Unknown user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.NotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "updateUser",
        "parameters": [
          {
            "in": "header",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.UpdateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user"
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Users can only update their own data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Unknown user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.NotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/users/{user_id}/setAccessRights": {
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "header",
          "name": "email",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "header",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "header",
          "name": "role",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "admin",
              "user"
            ]
          }
        }
      ],
      "put": {
        "operationId": "setAccessRights",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.AccessRights"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated access rights"
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required and admins cannot change their own permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Unknown user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.NotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/users/{user_id}/setPassword": {
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "header",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "header",
          "name": "role",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "admin",
              "user"
            ]
          }
        }
      ],
      "put": {
        "operationId": "setPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.PasswordUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the password"
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Cannot change another user's password and the old password must be correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Unknown user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.NotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/users/{user_id}/setRole": {
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "header",
          "name": "email",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "header",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "header",
          "name": "role",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "admin",
              "user"
            ]
          }
        }
      ],
      "put": {
        "operationId": "setRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.RoleUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated role"
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Admin rights are required and admins cannot change their own role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Unknown user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.NotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/user/validateToken": {
      "post": {
        "operationId": "validateToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.Token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Valid token"
          },
          "400": {
            "description": "Input data is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Invalid or unknown token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.InvalidCredentials"
                }
              }
            }
          },
          "404": {
            "description": "No user for this token found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.NotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v1/configuration/platformAccess": {
      "get": {
        "summary": "Get platform access configutation",
        "description": "Get platform access configutation",
        "operationId": "get_all_platform_access",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.PlatformConfigs"
                }
              }
            }
          }
        },
        "tags": [
          "config"
        ]
      },
      "put": {
        "summary": "Set platform access configutation",
        "description": "Set platform access configutation",
        "operationId": "edit_platform_access",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/config.Configuration"
              }
            }
          },
          "description": "Configuration to set",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Empty configuration given"
          }
        },
        "tags": [
          "config"
        ]
      }
    },
    "/api/v1/configuration/platformAccess/{platform_id}": {
      "get": {
        "summary": "Get platform access value",
        "description": "Get platform access value",
        "operationId": "get_platform_access",
        "parameters": [
          {
            "name": "platform_id",
            "in": "path",
            "required": true,
            "description": "Platform id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean",
                  "description": "True or False if platform is enabled or not"
                }
              }
            }
          }
        },
        "tags": [
          "config"
        ]
      }
    },
    "/api/v1/configuration/mailProviders": {
      "get": {
        "summary": "Get mail providers",
        "description": "Get all mail providers",
        "operationId": "get_mail_providers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "description": "List of mail providers",
                  "items": {
                    "$ref": "#/components/schemas/config.MailProvider"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "config"
        ]
      },
      "post": {
        "summary": "Add provider data",
        "description": "Add new provider data",
        "operationId": "add_mail_provider",
        "requestBody": {
          "$ref": "#/components/requestBodies/config.MailProvider"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.MailProvider"
                }
              }
            }
          },
          "400": {
            "description": "Wrong provider service or provider name already exists"
          }
        },
        "tags": [
          "config"
        ]
      }
    },
    "/api/v1/configuration/mailProviders/{provider_id}": {
      "get": {
        "summary": "Get provider data",
        "description": "Get provider data",
        "operationId": "get_mail_provider",
        "parameters": [
          {
            "$ref": "#/components/parameters/config.provider_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.MailProvider"
                }
              }
            }
          },
          "404": {
            "description": "Provider id does not exist"
          }
        },
        "tags": [
          "config"
        ]
      },
      "put": {
        "summary": "Edit provider",
        "description": "Edit provider",
        "operationId": "edit_mail_provider",
        "parameters": [
          {
            "$ref": "#/components/parameters/config.provider_id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/config.MailProvider"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.MailProvider"
                }
              }
            }
          },
          "404": {
            "description": "Provider id does not exist"
          }
        },
        "tags": [
          "config"
        ]
      },
      "delete": {
        "summary": "Delete provider",
        "description": "Delete provider",
        "parameters": [
          {
            "$ref": "#/components/parameters/config.provider_id"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Provider is currently set as default and cannot be deleted"
          },
          "404": {
            "description": "Provider id does not exist"
          }
        },
        "tags": [
          "config"
        ]
      }
    },
    "/api/v1/configuration/mailProviders/default": {
      "get": {
        "summary": "Get default mail provider",
        "description": "Get data for default mail provider",
        "operationId": "set_default_mail_provider",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.MailProvider"
                }
              }
            }
          },
          "404": {
            "description": "No default mail provider set"
          },
          "500": {
            "description": "More than one default provider set"
          }
        },
        "tags": [
          "config"
        ]
      }
    },
    "/api/v1/configuration/mailProviders/default/{provider_id}": {
      "put": {
        "summary": "Set default mail provider",
        "description": "Set default mail provider",
        "parameters": [
          {
            "$ref": "#/components/parameters/config.provider_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.MailProvider"
                }
              }
            }
          },
          "404": {
            "description": "Provider id does not exist"
          }
        },
        "tags": [
          "config"
        ]
      },
      "delete": {
        "summary": "Unset default mail provider",
        "description": "Unset mail provider as default",
        "parameters": [
          {
            "$ref": "#/components/parameters/config.provider_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Provider id does not exist"
          }
        },
        "tags": [
          "config"
        ]
      }
    },
    "/api/v1/configuration/managementToolTypes": {
      "get": {
        "summary": "Get management tool types",
        "description": "Get management tool types",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.ManagementToolTypes"
                }
              }
            }
          }
        },
        "tags": [
          "config"
        ]
      }
    },
    "/api/v1/configuration/managementTools": {
      "get": {
        "summary": "Get all mangement tools",
        "description": "Get all management tools",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.ManagementTools"
                }
              }
            }
          }
        },
        "tags": [
          "config"
        ]
      },
      "post": {
        "summary": "Create new management tool",
        "description": "Create new management tool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/config.CreateManagementTool"
              }
            }
          },
          "description": "arguments",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.ManagementTool"
                }
              }
            }
          },
          "400": {
            "description": "Invalid management tool type or url format or error saving data in database"
          }
        },
        "tags": [
          "config"
        ]
      }
    },
    "/api/v1/configuration/managementTools/{tool_id}": {
      "get": {
        "summary": "Get specified management tool",
        "description": "Get specified management tool",
        "parameters": [
          {
            "$ref": "#/components/parameters/config.tool_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.ManagementTool"
                }
              }
            }
          },
          "400": {
            "description": "Wrong tool id format"
          },
          "404": {
            "description": "Unknown tool id"
          }
        },
        "tags": [
          "config"
        ]
      },
      "put": {
        "summary": "Update specified management tool",
        "description": "Update specified management tool",
        "parameters": [
          {
            "$ref": "#/components/parameters/config.tool_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/config.UpdateManagementTool"
              }
            }
          },
          "description": "arguments",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/config.ManagementTool"
                }
              }
            }
          },
          "400": {
            "description": "Wrong tool id or url format"
          },
          "404": {
            "description": "Unknown tool id"
          }
        },
        "tags": [
          "config"
        ]
      }
    },
    "/api/v1/configuration/logo": {
      "post": {
        "summary": "Send logo image to be stored",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "logo": {
                    "description": "Uploaded logo image",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "logo"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request headers, unsupported image extension, error saving image."
          },
          "411": {
            "description": "Missing request header Content-Length"
          },
          "413": {
            "description": "Image is to large. Maximum image size is 0.5MB."
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "Error while saving logo image"
          }
        },
        "tags": [
          "config"
        ]
      },
      "get": {
        "summary": "Get logo image",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "There is no image stored yet"
          }
        },
        "tags": [
          "config"
        ]
      }
    },
    "/api/v1/subscription/subscriptions": {
      "get": {
        "summary": "Get subscriptions",
        "description": "Retrieve list of all subscriptions",
        "operationId": "getSubscriptions",
        "parameters": [
          {
            "name": "role",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptions",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Return only subscriptions to which given user has an access to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformId",
            "in": "query",
            "description": "Filter subscription by given platform id (openStack , aws, k5, ...).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of subscriptions",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/subscr.Subscriptions"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/subscr.BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/subscr.InternalError"
          }
        },
        "tags": [
          "subscr"
        ]
      },
      "post": {
        "summary": "Create subscription",
        "description": "Create new subscription. Provided credentials are validated against target platform",
        "operationId": "createSubscription",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscr.CreateSubscription"
              }
            }
          },
          "description": "Details of the subscription that will be created",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/subscr.Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters or credentials validation failure"
          },
          "500": {
            "description": "Subscription validation failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/subscr.Error"
                }
              }
            }
          }
        },
        "tags": [
          "subscr"
        ]
      }
    },
    "/api/v1/subscription/subscriptions/{subscription_id}": {
      "get": {
        "summary": "Get subscription",
        "description": "Get single subscription for specified subscription_id",
        "operationId": "getSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscr.subscription_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/subscr.Subscription"
                }
              }
            }
          },
          "404": {
            "description": "No subscription for given id"
          },
          "500": {
            "$ref": "#/components/responses/subscr.InternalError"
          }
        },
        "tags": [
          "subscr"
        ]
      },
      "delete": {
        "summary": "Delete subscription",
        "description": "Delete subscription for given id",
        "operationId": "deleteSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscr.subscription_id"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "404": {
            "description": "No subscription for given id"
          },
          "500": {
            "$ref": "#/components/responses/subscr.InternalError"
          }
        },
        "tags": [
          "subscr"
        ]
      },
      "put": {
        "summary": "Modify subscription",
        "description": "Modify subscription for given id",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscr.subscription_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscr.ModifySubscription"
              }
            }
          },
          "description": "Details of the subscription that will be created",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/subscr.Subscription"
                }
              }
            }
          },
          "204": {
            "description": "No parameter to modify given"
          },
          "400": {
            "description": "Parameter that cannot be modified given or invalid credentials"
          },
          "404": {
            "description": "No subscription for given id"
          },
          "500": {
            "$ref": "#/components/responses/subscr.InternalError"
          }
        },
        "tags": [
          "subscr"
        ]
      }
    },
    "/api/v1/subscription/subscriptions/{subscription_id}/tokens": {
      "get": {
        "summary": "Get token",
        "description": "Get token for a subscription",
        "operationId": "get_token",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscr.subscription_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/subscr.Token"
                }
              }
            }
          },
          "400": {
            "description": "Platform not supported"
          },
          "500": {
            "description": "Error during fetching token from platform"
          }
        },
        "tags": [
          "subscr"
        ]
      }
    },
    "/api/v1/subscription/validateVm": {
      "put": {
        "description": "Validate a VM against a policy.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscr.VirtualMachineValidationParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Validation completed. Response will contain `message` property describing the reason for the failure, `isCompliant` will be set to `false` in this case. Response will be `{isCompliant: true}` in case of successfull validation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "required": [
                    "isCompliant"
                  ],
                  "properties": {
                    "isCompliant": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/subscr.InternalError"
          }
        },
        "tags": [
          "subscr"
        ]
      }
    },
    "/api/v1/subscription/validateWorkshift": {
      "put": {
        "description": "Validate a workshift against a policy.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscr.WorkshiftValidationParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Validation completed. Response will contain `message` property describing the reason for the failure, `isCompliant` will be set to `false` in this case. Response will be `{isCompliant: true}` in case of successful validation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "required": [
                    "isCompliant"
                  ],
                  "properties": {
                    "isCompliant": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/subscr.InternalError"
          }
        },
        "tags": [
          "subscr"
        ]
      }
    },
    "/api/v1/management/registerVm": {
      "post": {
        "description": "Register Vm in management tool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mgmt.RegisterVm"
              }
            }
          },
          "description": "Vm and management tool information",
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "504": {
            "description": "Timeout error communicating with management tool"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/unregisterVm": {
      "delete": {
        "summary": "Unregister Vm from management tool",
        "description": "Unregister Vm from management tool",
        "requestBody": {
          "$ref": "#/components/requestBodies/mgmt.ManageVm"
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "404": {
            "description": "Given vm was not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.HttpNotFoundError"
                }
              }
            }
          },
          "504": {
            "description": "Timeout error communicating with management tool"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/isManaged": {
      "get": {
        "summary": "Check if a vm is managed",
        "deprecated": true,
        "requestBody": {
          "$ref": "#/components/requestBodies/mgmt.ManageVm"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean",
                  "description": "True if VM is managed, false otherwise"
                }
              }
            }
          },
          "404": {
            "description": "No management information for given VM exists",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.HttpNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/managedVms": {
      "get": {
        "summary": "Return list of managed VM ids",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vmId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mgmt.ManagedVms"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/testConnectivity": {
      "post": {
        "summary": "Check connection with Vm",
        "description": "Check connection with Vm",
        "requestBody": {
          "$ref": "#/components/requestBodies/mgmt.ManageVm"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean",
                  "description": "True or False if Vm is available"
                }
              }
            }
          },
          "404": {
            "description": "Given vm was not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.HttpNotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/installApp": {
      "post": {
        "summary": "Install application",
        "description": "Install application",
        "x-deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mgmt.Application"
              }
            }
          },
          "description": "Application and VM information",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean",
                  "description": "True or False if application was installed correctly"
                }
              }
            }
          },
          "404": {
            "description": "Given vm was not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.HttpNotFoundError"
                }
              }
            }
          },
          "504": {
            "description": "Timeout error communicating with management tool"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/uninstallApp": {
      "delete": {
        "summary": "Uninstall application",
        "description": "Uninstall application",
        "x-deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mgmt.Application"
              }
            }
          },
          "description": "Application and Vm information",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean",
                  "description": "True or False if application was uninstalled correctly"
                }
              }
            }
          },
          "404": {
            "description": "Given vm was not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.HttpNotFoundError"
                }
              }
            }
          },
          "504": {
            "description": "Timeout error communicating with management tool"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/details": {
      "get": {
        "summary": "Get vm details",
        "description": "Get vm details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mgmt.VmDetailsParams"
              }
            }
          },
          "description": "Operating system and Vm information",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.VmDetails"
                }
              }
            }
          },
          "404": {
            "description": "Given vm was not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.HttpNotFoundError"
                }
              }
            }
          },
          "504": {
            "description": "Timeout error communicating with management tool"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/getBootstrapScript": {
      "get": {
        "summary": "Get bootstrap script",
        "description": "Get bootstrap script",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mgmt.BootstrapScript"
              }
            }
          },
          "description": "Platform and Vm information",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.BootstrapScriptReturn"
                }
              }
            }
          },
          "400": {
            "description": "Error while processing input information"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/unregisterSubscriptionVms": {
      "delete": {
        "summary": "Unregister vms from subscription",
        "description": "Unregister vms from subscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Subscription id",
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error while processing input information"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/replaceApps": {
      "post": {
        "summary": "Upload apps metadata",
        "description": "Upload apps metadata",
        "parameters": [
          {
            "name": "X-Tool-Token",
            "in": "header",
            "required": true,
            "description": "A token that gives permission to upload apps for specific tool.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "apps": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/mgmt.ReplaceApp"
                    }
                  }
                }
              }
            }
          },
          "description": "Apps metadata",
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/apps": {
      "get": {
        "summary": "List apps",
        "parameters": [
          {
            "name": "tool_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mgmt.App"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/apps/{app_id}": {
      "get": {
        "summary": "Get app by id",
        "parameters": [
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.App"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/tools/{tool_id}/apps/{app_name}": {
      "get": {
        "summary": "Get app by name",
        "parameters": [
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "app_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.App"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/appInstances": {
      "get": {
        "summary": "List apps instances",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "required": true,
            "description": "subscription id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "toolId",
            "in": "query",
            "required": false,
            "description": "Optional filter",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vmId",
            "in": "query",
            "required": false,
            "description": "Optional filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "Optional filter.",
            "schema": {
              "type": "string",
              "enum": [
                "INITIAL",
                "INSTALLING",
                "INSTALL_SUCCEEDED",
                "INSTALL_FAILED",
                "UNINSTALLING",
                "UNINSTALL_SUCCEEDED",
                "UNINSTALL_FAILED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mgmt.AppInstance"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "mgmt"
        ]
      },
      "post": {
        "summary": "Create an app instance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "required": true,
            "description": "subscription id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "vmId",
                  "toolId",
                  "appId"
                ],
                "properties": {
                  "vmId": {
                    "type": "string"
                  },
                  "appId": {
                    "$ref": "#/components/schemas/mgmt.App/properties/id"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.AppInstance"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/appInstances/{app_instance_id}": {
      "parameters": [
        {
          "name": "subscriptionId",
          "in": "query",
          "required": true,
          "description": "subscription id",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        },
        {
          "name": "app_instance_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        },
        {
          "name": "role",
          "in": "header",
          "schema": {
            "type": "string",
            "enum": [
              "admin",
              "user"
            ]
          }
        }
      ],
      "get": {
        "summary": "Get an app instance",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.AppInstance"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "mgmt"
        ]
      },
      "delete": {
        "summary": "Delete an app instance",
        "description": "It is allowed to delete app instances that are in one of the following states: INITIAL, INSTALL_FAILED, UNINSTALL_SUCCEEDED, UNINSTALL_FAILED.\n",
        "parameters": [
          {
            "name": "forceDelete",
            "in": "query",
            "description": "Forcely delete app_instance not checking the state. This option is only available for administrators\n",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "App instance not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/appInstances/{app_instance_id}/uninstall": {
      "parameters": [
        {
          "name": "subscriptionId",
          "in": "query",
          "required": true,
          "description": "subscription id",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        },
        {
          "name": "app_instance_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.AppInstance"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/tools/{tool_id}/tokens": {
      "post": {
        "summary": "Generate a new token for the given tool",
        "parameters": [
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/mgmt.ToolToken/properties/name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/mgmt.ToolToken"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/management/tools/{tool_id}/tokens/{token_value}": {
      "delete": {
        "summary": "Delete the token",
        "parameters": [
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "token_value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "mgmt"
        ]
      }
    },
    "/api/v1/tag/tags": {
      "get": {
        "description": "Returns a list of all tags with values",
        "operationId": "GetTags",
        "responses": {
          "200": {
            "description": "An array of Tag objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.Tags"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "tag"
        ]
      },
      "post": {
        "description": "Creates tag with given name and values",
        "operationId": "CreateTag",
        "parameters": [
          {
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          },
          {
            "in": "header",
            "name": "email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag.Tag"
              }
            }
          },
          "description": "The details of tag that will be created",
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly created tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.Tag"
                }
              }
            }
          },
          "400": {
            "description": "Invalid json payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "tag"
        ]
      }
    },
    "/api/v1/tag/tags/{tagName}": {
      "delete": {
        "description": "Delete tag with given name",
        "operationId": "DeleteTag",
        "parameters": [
          {
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          },
          {
            "in": "header",
            "name": "email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted tag"
          },
          "400": {
            "description": "Invalid role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Unknown tagId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.TagNotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "tag"
        ]
      },
      "get": {
        "operationId": "GetTag",
        "responses": {
          "200": {
            "description": "The tag data for given name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.Tag"
                }
              }
            }
          },
          "404": {
            "description": "Unknown tagName",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.TagNotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.ServiceUnavailable"
                }
              }
            }
          }
        },
        "summary": "Returns the specified tag",
        "tags": [
          "tag"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tagName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Update some fields of a tag",
        "operationId": "UpdateTag",
        "parameters": [
          {
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          },
          {
            "in": "header",
            "name": "email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag.TagUpdate"
              }
            }
          },
          "description": "The details of tag that will be updated",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated tag"
          },
          "400": {
            "description": "Invalid role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Unknown tagId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.TagNotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag.ServiceUnavailable"
                }
              }
            }
          }
        },
        "tags": [
          "tag"
        ]
      }
    },
    "/api/v1/notification/email": {
      "post": {
        "summary": "Send email",
        "description": "Send email",
        "operationId": "send_email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notif.Message"
              }
            }
          },
          "description": "Message data",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "unsupported mail provider"
          }
        },
        "tags": [
          "notif"
        ]
      }
    },
    "/api/v1/webhook/contentTypes": {
      "get": {
        "operationId": "getContentTypes",
        "responses": {
          "200": {
            "description": "An array of Content Types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ContentTypes"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ServiceUnavailable"
                }
              }
            }
          }
        },
        "summary": "Get available content types for webhooks",
        "tags": [
          "webhook"
        ]
      }
    },
    "/api/v1/webhook/eventTypes": {
      "get": {
        "operationId": "getEventTypes",
        "responses": {
          "200": {
            "description": "An array of Event Types objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.EventTypes"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ServiceUnavailable"
                }
              }
            }
          }
        },
        "summary": "Get available event types for webhooks",
        "tags": [
          "webhook"
        ]
      }
    },
    "/api/v1/webhook/webhooks": {
      "get": {
        "operationId": "getWebhooks",
        "responses": {
          "200": {
            "description": "An array of Webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Webhooks"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ServiceUnavailable"
                }
              }
            }
          }
        },
        "summary": "Get list of defined webhooks",
        "tags": [
          "webhook"
        ]
      },
      "post": {
        "operationId": "createWebhook",
        "parameters": [
          {
            "in": "header",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook.Webhook"
              }
            }
          },
          "description": "The details of the new webhook",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Properly created a new webhook"
          },
          "400": {
            "description": "Invalid JSON payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ServiceUnavailable"
                }
              }
            }
          }
        },
        "summary": "Create a new webhook",
        "tags": [
          "webhook"
        ]
      }
    },
    "/api/v1/webhook/webhooks/{webhook_id}": {
      "delete": {
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "in": "header",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook was deleted properly"
          },
          "400": {
            "description": "Invalid role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Unknown webhook id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookNotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ServiceUnavailable"
                }
              }
            }
          }
        },
        "summary": "Delete specified webhook",
        "tags": [
          "webhook"
        ]
      },
      "get": {
        "operationId": "getSingleWebhook",
        "responses": {
          "200": {
            "description": "Webhook for give id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Webhook"
                }
              }
            }
          },
          "404": {
            "description": "Unknown webhook id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookNotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ServiceUnavailable"
                }
              }
            }
          }
        },
        "summary": "Get single webhook",
        "tags": [
          "webhook"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "webhook_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "operationId": "updateWebhook",
        "parameters": [
          {
            "in": "header",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook.Webhook"
              }
            }
          },
          "description": "The details of the webhook",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook was updated properly"
          },
          "400": {
            "description": "Invalid JSON payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Unknown webhook id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookNotFound"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ServiceUnavailable"
                }
              }
            }
          }
        },
        "summary": "Update specified webhook",
        "tags": [
          "webhook"
        ]
      }
    },
    "/api/v1/webhook/webhooks/{webhook_id}/disable": {
      "delete": {
        "operationId": "disableWebhook",
        "parameters": [
          {
            "in": "header",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was disabled properly"
          },
          "400": {
            "description": "Invalid role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Unknown webhook id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookNotFound"
                }
              }
            }
          },
          "409": {
            "description": "Changing status error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ChangeStatusError"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ServiceUnavailable"
                }
              }
            }
          }
        },
        "summary": "Disable specified webhook",
        "tags": [
          "webhook"
        ]
      }
    },
    "/api/v1/webhook/webhooks/{webhook_id}/enable": {
      "put": {
        "operationId": "enableWebhook",
        "parameters": [
          {
            "in": "header",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "user"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was enabled properly"
          },
          "400": {
            "description": "Invalid role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.InvalidInput"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Unknown webhook id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookNotFound"
                }
              }
            }
          },
          "409": {
            "description": "Changing status error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ChangeStatusError"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.UnexpectedError"
                }
              }
            }
          },
          "503": {
            "description": "Database is unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.ServiceUnavailable"
                }
              }
            }
          }
        },
        "summary": "Enable specified webhook",
        "tags": [
          "webhook"
        ]
      }
    },
    "/api/v1/whitelist/imageOS": {
      "get": {
        "summary": "Get image type (OS) for a image",
        "parameters": [
          {
            "$ref": "#/components/parameters/img_whitelist.imageName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/img_whitelist.OSDetails"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/img_whitelist.500Error"
          }
        },
        "tags": [
          "img_whitelist"
        ]
      }
    },
    "/api/v1/whitelist/osList": {
      "get": {
        "summary": "Get os types and distributions as a list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/img_whitelist.OSDetails"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/img_whitelist.500Error"
          }
        },
        "tags": [
          "img_whitelist"
        ]
      }
    },
    "/api/v1/whitelist/images": {
      "post": {
        "summary": "Add single image to whitelist",
        "parameters": [
          {
            "$ref": "#/components/parameters/img_whitelist.subscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/img_whitelist.ImageAdd"
              }
            }
          },
          "description": "Image details",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/img_whitelist.Image"
                }
              }
            }
          },
          "400": {
            "description": "Error saving data or subscription for unsupported platform was passed"
          },
          "404": {
            "description": "Unknown subscription id was passed"
          },
          "500": {
            "$ref": "#/components/responses/img_whitelist.500Error"
          }
        },
        "tags": [
          "img_whitelist"
        ]
      },
      "get": {
        "summary": "Get images from whitelist",
        "parameters": [
          {
            "$ref": "#/components/parameters/img_whitelist.subscriptionId"
          },
          {
            "$ref": "#/components/parameters/img_whitelist.name"
          },
          {
            "$ref": "#/components/parameters/img_whitelist.limit"
          },
          {
            "$ref": "#/components/parameters/img_whitelist.page"
          },
          {
            "$ref": "#/components/parameters/img_whitelist.private"
          }
        ],
        "responses": {
          "200": {
            "description": "List of the images",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/img_whitelist.Whitelist"
                }
              }
            }
          },
          "400": {
            "description": "Subscription for unsupported platform was passed"
          },
          "404": {
            "description": "Unknown subscription id was passed"
          },
          "500": {
            "description": "Error while retrieving flavors"
          }
        },
        "tags": [
          "img_whitelist"
        ]
      },
      "delete": {
        "summary": "Delete whitelist",
        "parameters": [
          {
            "$ref": "#/components/parameters/img_whitelist.subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "Whitelist was deleted"
          },
          "400": {
            "description": "Subscription for unsupported platform was passed"
          },
          "404": {
            "description": "Unknown subscription id was passed"
          },
          "500": {
            "$ref": "#/components/responses/img_whitelist.500Error"
          }
        },
        "tags": [
          "img_whitelist"
        ]
      }
    },
    "/api/v1/whitelist/images/{imageId}": {
      "get": {
        "summary": "Get single image",
        "parameters": [
          {
            "$ref": "#/components/parameters/img_whitelist.subscriptionId"
          },
          {
            "$ref": "#/components/parameters/img_whitelist.imageId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/img_whitelist.Image"
                }
              }
            }
          },
          "400": {
            "description": "Subscription for unsupported platform was passed"
          },
          "404": {
            "description": "Unknown subscription id or image id was passed"
          },
          "500": {
            "description": "Error while retrieving flavors"
          }
        },
        "tags": [
          "img_whitelist"
        ]
      },
      "put": {
        "summary": "Update operating system for image",
        "description": "Please use PATCH method. This action will be removed on 14.05.2019",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/img_whitelist.subscriptionId"
          },
          {
            "$ref": "#/components/parameters/img_whitelist.imageId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/img_whitelist.ImageUpdate"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/img_whitelist.Image"
                }
              }
            }
          },
          "400": {
            "description": "OS should be one of values linux, windows, unknown or subscription for unsupported platform was passed"
          },
          "404": {
            "description": "Unknown subscription id or image id was passed"
          },
          "500": {
            "$ref": "#/components/responses/img_whitelist.500Error"
          }
        },
        "tags": [
          "img_whitelist"
        ]
      },
      "delete": {
        "summary": "Remove image from whitelist",
        "parameters": [
          {
            "$ref": "#/components/parameters/img_whitelist.subscriptionId"
          },
          {
            "$ref": "#/components/parameters/img_whitelist.imageId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Subscription for unsupported platform was passed"
          },
          "404": {
            "description": "Unknown subscription id or image id was passed"
          },
          "500": {
            "$ref": "#/components/responses/img_whitelist.500Error"
          }
        },
        "tags": [
          "img_whitelist"
        ]
      },
      "patch": {
        "summary": "Update operating system for image",
        "parameters": [
          {
            "$ref": "#/components/parameters/img_whitelist.subscriptionId"
          },
          {
            "$ref": "#/components/parameters/img_whitelist.imageId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/img_whitelist.ImageUpdate"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/img_whitelist.Image"
                }
              }
            }
          },
          "400": {
            "description": "OS should be one of values linux, windows, unknown or subscription for unsupported platform was passed"
          },
          "404": {
            "description": "Unknown subscription id or image id was passed"
          },
          "500": {
            "$ref": "#/components/responses/img_whitelist.500Error"
          }
        },
        "tags": [
          "img_whitelist"
        ]
      }
    },
    "/api/v1/vmware/compute/availabilityZones": {
      "get": {
        "description": "List all Availability Zones",
        "operationId": "vmware_service.resources.availability_zones.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/vmware.AvailabilityZone"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "A list of availability zones"
          }
        },
        "summary": "List availability zones",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/flavors": {
      "get": {
        "description": "Get the list of all flavors",
        "operationId": "vmware_service.resources.flavors.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "items": {
                    "$ref": "#/components/schemas/vmware.Flavor"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "List flavors",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/flavors/{flavorId}": {
      "get": {
        "description": "Get specific flavor by id",
        "operationId": "vmware_service.resources.flavor.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "Flavor id",
            "in": "path",
            "name": "flavorId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.Flavor",
                  "description": "OK"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get flavor by id",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/images": {
      "get": {
        "description": "The endpoint is used only by the analytics service and should be deprecated in favor of whitelist/images.",
        "operationId": "vmware_service.resources.images.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.ImageName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "items": {
                    "$ref": "#/components/schemas/vmware.PublicPrivateImage"
                  },
                  "type": "array",
                  "uniqueItems": false
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get images",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/images/{imageId}": {
      "get": {
        "deprecated": true,
        "description": "Get specific images by id",
        "operationId": "vmware_service.resources.image.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "Image id",
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.Image",
                  "description": "OK"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get image by id",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/interfaces": {
      "get": {
        "description": "List of network interfaces",
        "operationId": "vmware_service.resources.interfaces.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "Filter interfaces for VM id",
            "in": "query",
            "name": "vmId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "items": {
                    "$ref": "#/components/schemas/vmware.Interface"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "List network interfaces",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/keypairs": {
      "get": {
        "description": "List all keypairs",
        "operationId": "vmware_service.resources.keypairs.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/vmware.Keypair"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "A list of keypairs"
          }
        },
        "summary": "List keypairs",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/keypairs/generate": {
      "post": {
        "description": "Create a new keypair",
        "operationId": "vmware_service.resources.keypairs.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.GenerateKeypair",
                "description": "Keypair data"
              }
            }
          },
          "description": "Keypair data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.NewKeypair"
                }
              }
            },
            "description": "Keypair created successfully"
          }
        },
        "summary": "Create a new keypair",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/keypairs/import": {
      "post": {
        "description": "Import a new public keypair",
        "operationId": "vmware_service.resources.keypairs.upload",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.ImportKeypair",
                "description": "Public keypair to import"
              }
            }
          },
          "description": "Public keypair to import",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.Keypair"
                }
              }
            },
            "description": "Keypair imported successfully"
          }
        },
        "summary": "Import a keypair",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/keypairs/{keypairId}": {
      "delete": {
        "description": "Delete a specific keypair",
        "operationId": "vmware_service.resources.keypair.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "Keypair id",
            "in": "path",
            "name": "keypairId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Keypair deleted successfully"
          }
        },
        "summary": "Delete a keypair",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/networks": {
      "get": {
        "description": "List all networks",
        "operationId": "vmware_service.resources.networks.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "Availability zone to filter by",
            "in": "query",
            "name": "availabilityZone",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/vmware.Network"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "A list of networks"
          }
        },
        "summary": "List networks",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/networks/{networkId}/subnets": {
      "get": {
        "description": "List all subnets which belong to the given network",
        "operationId": "vmware_service.resources.subnets.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "Network id",
            "in": "path",
            "name": "networkId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Availability zone to filter by",
            "in": "query",
            "name": "availabilityZone",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/vmware.Subnet"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "A list of subnets"
          }
        },
        "summary": "List network subnets",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/privateImages": {
      "get": {
        "description": "Get private images",
        "operationId": "vmware_service.resources.images.get_private",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.ImageName"
          },
          {
            "description": "Image id to filter by",
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "items": {
                    "$ref": "#/components/schemas/vmware.PublicPrivateImage"
                  },
                  "type": "array",
                  "uniqueItems": false
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Too many filtration params were specified. Choose either name or id."
          }
        },
        "summary": "Get private images",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/privateImages/{imageId}": {
      "get": {
        "description": "Get specific private image by id",
        "operationId": "vmware_service.resources.image.get_private",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "Image id",
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Image does not exist"
          }
        },
        "summary": "Get private image by id",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/publicImages": {
      "get": {
        "description": "Get public images",
        "operationId": "vmware_service.resources.images.get_public",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.ImageName"
          },
          {
            "description": "Image id to filter by",
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "items": {
                    "$ref": "#/components/schemas/vmware.PublicPrivateImage"
                  },
                  "type": "array",
                  "uniqueItems": false
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Too many filtration params were specified. Choose either name or id."
          }
        },
        "summary": "Get public images",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/publicImages/{imageId}": {
      "get": {
        "description": "Get specific public image by id",
        "operationId": "vmware_service.resources.image.get_public",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "Image id",
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.Image",
                  "description": "OK"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Image does not exist"
          }
        },
        "summary": "Get public image by id",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/regions": {
      "get": {
        "description": "List all regions",
        "operationId": "vmware_service.resources.regions.get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/vmware.Region"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "A list of regions"
          }
        },
        "summary": "List regions",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/securityGroups": {
      "get": {
        "description": "List of security groups. The result is always an empty list. There are no security groups in VMWare.",
        "operationId": "vmware_service.resources.security_groups.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "VM id",
            "in": "query",
            "name": "vmId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Empty list. There are no security groups in VMWare.",
                  "items": {
                    "type": "object"
                  },
                  "maxItems": 0,
                  "type": "array"
                }
              }
            },
            "description": "Empty list. There are no security groups in VMWare."
          }
        },
        "summary": "List security groups",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/snapshots": {
      "get": {
        "description": "Get list of all snapshots",
        "operationId": "vmware_service.resources.snapshots.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMIdQuery"
          }
        ],
        "responses": {
          "501": {
            "description": "Not implemented"
          }
        },
        "summary": "List snapshots",
        "tags": [
          "vmware"
        ]
      },
      "post": {
        "description": "Create a new snapshot",
        "operationId": "vmware_service.resources.snapshots.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.CreateSnapshot"
              }
            }
          },
          "description": "A create snapshot object",
          "required": true
        },
        "responses": {
          "501": {
            "description": "Not implemented"
          }
        },
        "summary": "Create a new snapshot",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/snapshots/{snapshotId}": {
      "delete": {
        "description": "Delete snapshot",
        "operationId": "vmware_service.resources.snapshot.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "snapshot id",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "501": {
            "description": "Not implemented"
          }
        },
        "summary": "Delete snapshot",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/validateSubscription": {
      "post": {
        "description": "Validate subscription before adding it",
        "operationId": "vmware_service.resources.validate_subscription.post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.Subscription",
                "description": "Validate subscription data"
              }
            }
          },
          "description": "Validate subscription data"
        },
        "responses": {
          "204": {
            "description": "Subscription successfully validated"
          },
          "400": {
            "description": "Invalid subscription"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Validate subscription",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/vms": {
      "get": {
        "description": "List all virtual machines",
        "operationId": "vmware_service.resources.vms.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.AvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/vmware.VmSimple"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "A list of VMs"
          }
        },
        "summary": "List VMs",
        "tags": [
          "vmware"
        ]
      },
      "post": {
        "description": "Create a new VM",
        "operationId": "vmware_service.resources.vms.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.VMCreate",
                "description": "VM creation data"
              }
            }
          },
          "description": "VM creation data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.VM"
                }
              }
            },
            "description": "A VM object"
          }
        },
        "summary": "Create a VM",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/vms/{vmId}": {
      "delete": {
        "description": "Delete a VM",
        "operationId": "vmware_service.resources.vm.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMId"
          }
        ],
        "responses": {
          "204": {
            "description": "VM is deleted and marked as unmanaged"
          }
        },
        "summary": "Delete a VM",
        "tags": [
          "vmware"
        ]
      },
      "get": {
        "description": "Get virtual machine by id",
        "operationId": "vmware_service.resources.vm.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.VM"
                }
              }
            },
            "description": "A VM object"
          }
        },
        "summary": "Get VM by id",
        "tags": [
          "vmware"
        ]
      },
      "patch": {
        "description": "Modify VM properties. Currently it is possible to modify the VM flavor.",
        "operationId": "vmware_service.resources.vm.patch",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.UpdateVmParams",
                "description": "VM properties"
              }
            }
          },
          "description": "VM properties",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Response body is empty"
          }
        },
        "summary": "Update VM",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/vms/{vmId}/command/{action}": {
      "put": {
        "description": "Execute action on a VM. Actions are start, poweroff, softReboot, hardReboot.",
        "operationId": "vmware_service.resources.vm_command.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMId"
          },
          {
            "description": "Power action to be invoked on the VM",
            "in": "path",
            "name": "action",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/vmware.Action"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "OK"
          }
        },
        "summary": "Execute a power action on a VM",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/vms/{vmId}/details": {
      "get": {
        "description": "Get VM details",
        "operationId": "vmware_service.resources.vm_details.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "OK",
                  "items": {
                    "$ref": "#/components/schemas/vmware.VMdetails"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get VM details",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/vms/{vmId}/management": {
      "get": {
        "description": "Check if management service for the VM is available",
        "operationId": "vmware_service.resources.management.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.Management"
                }
              }
            },
            "description": "VM management status"
          }
        },
        "summary": "Get VM management status",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/vms/{vmId}/password": {
      "get": {
        "description": "Get the password in an encrypted form for the virtual machine",
        "operationId": "vmware_service.resources.vm_password.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.Password"
                }
              }
            },
            "description": "Encrypted VM password"
          }
        },
        "summary": "Get the VM password",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/vms/{vmId}/setTag": {
      "put": {
        "description": "Set a tag value for a VM",
        "operationId": "vmware_service.resources.vm_tag.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.TagUpdate"
              }
            }
          },
          "description": "Tag object to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response"
          }
        },
        "summary": "Tag VM",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/vms/{vmId}/workshift": {
      "delete": {
        "description": "Delete the VM Workshift",
        "operationId": "vmware_service.resources.vm_workshift.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.VMId"
          },
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          }
        ],
        "responses": {
          "204": {
            "description": "Workshift deleted successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Workshift does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete the VM Workshift",
        "tags": [
          "vmware"
        ]
      },
      "post": {
        "description": "Create a VM Workshift",
        "operationId": "vmware_service.resources.vm_workshifts.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.Workshift"
              }
            }
          },
          "description": "Workshift object",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.Workshift",
                  "description": "Workshift created successfully"
                }
              }
            },
            "description": "Workshift created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Workshift does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Add a workshift to the VM",
        "tags": [
          "vmware"
        ]
      },
      "put": {
        "description": "Update the VM Workshift",
        "operationId": "vmware_service.resources.vm_workshift.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.Workshift"
              }
            }
          },
          "description": "Workshift object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.Workshift",
                  "description": "Workshift updated successfully"
                }
              }
            },
            "description": "Workshift updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Workshift does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update the VM workshift",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/volumeTypes": {
      "get": {
        "description": "Get a list of all volume types user can create volume with",
        "operationId": "vmware_service.resources.volume_types.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "description": "Availability zone to filter by",
            "in": "query",
            "name": "availabilityZoneId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true, show only volumes on which OS can be installed",
            "in": "query",
            "name": "isOsCompatible",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/vmware.VolumeType"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "A list of objects"
          }
        },
        "summary": "List volume types",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/volumes": {
      "get": {
        "description": "Get list of all volumes",
        "operationId": "vmware_service.resources.volumes.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.FilterVolumeStatus"
          },
          {
            "description": "Availability zone to filter by",
            "in": "query",
            "name": "availabilityZone",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter volumes by isOsDisk value",
            "in": "query",
            "name": "isOsDisk",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/vmware.Volume"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "A list of volumes"
          }
        },
        "summary": "List volumes",
        "tags": [
          "vmware"
        ]
      },
      "post": {
        "description": "Create a new volume",
        "operationId": "vmware_service.resources.volumes.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.NewVolume"
              }
            }
          },
          "description": "A volume object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmware.Volume"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a new volume",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/volumes/{volume_id}": {
      "patch": {
        "description": "Modify volume properties. Currently it is possible to change to volume size.",
        "operationId": "vmware_service.resources.volume.patch",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VolumeId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware.UpdateVolumeParams",
                "description": "Volume properties"
              }
            }
          },
          "description": "Volume properties",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Volume was updated successfully"
          }
        },
        "summary": "Update a volume",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/vmware/compute/volumes/{volume_id}/detach": {
      "delete": {
        "operationId": "vmware_service.resources.volume_attachment.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/vmware.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/vmware.VolumeId"
          },
          {
            "$ref": "#/components/parameters/vmware.VMIdQuery"
          }
        ],
        "responses": {
          "204": {
            "description": "Volume detached from the VM successfully"
          }
        },
        "summary": "Dettaches and deletes a volume",
        "tags": [
          "vmware"
        ]
      }
    },
    "/api/v1/azure/compute/publicImages": {
      "get": {
        "operationId": "azure_service.api.public_images.get",
        "summary": "Lists all public images for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.ImageName"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of public images",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "$ref": "#/components/schemas/azure.PublicPrivateImage"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/publicImages/{image_id}": {
      "get": {
        "operationId": "azure_service.api.public_image.get",
        "summary": "Gets a single public image by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.ImageId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single public image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.PublicPrivateImage"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/privateImages": {
      "get": {
        "operationId": "azure_service.api.private_images.get",
        "summary": "Lists private images for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.ImageName"
          }
        ],
        "responses": {
          "200": {
            "description": "Since there are no private images in Azure returned list is always empty.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "maxItems": 0,
                  "items": {
                    "$ref": "#/components/schemas/azure.PublicPrivateImage"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/privateImages/{image_id}": {
      "get": {
        "operationId": "azure_service.api.private_image.get",
        "summary": "Gets a single private image by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.ImageId"
          }
        ],
        "responses": {
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/validateSubscription": {
      "post": {
        "operationId": "azure_service.api.validate_subscription.post",
        "summary": "Validate subscription credentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.Subscription"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Properly validated subscription"
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/images/{image_id}": {
      "get": {
        "operationId": "azure_service.api.image.get",
        "summary": "Gets a single image by id",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.ImageId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.PublicPrivateImage"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/regions": {
      "get": {
        "operationId": "azure_service.api.regions.get",
        "summary": "Lists regions",
        "description": "If subscriptionId is not passed as query parameters endpoint returns list of regions not scoped to any subscription. Otherwise it returns regions for specified subscription.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.OptionalSubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "$ref": "#/components/schemas/azure.Region"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/availabilityZones": {
      "get": {
        "operationId": "azure_service.api.availability_zone.get",
        "summary": "Lists availability zones for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of availability zones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 1,
                  "items": {
                    "$ref": "#/components/schemas/azure.AvailabilityZone"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/availabilitySets": {
      "get": {
        "operationId": "azure_service.api.availability_sets.get",
        "summary": "Lists availability sets for specified subscription and resource group",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of availability sets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/azure.AvailabilitySet"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/availabilitySets/{availability_set_id}": {
      "get": {
        "operationId": "azure_service.api.availability_set.get",
        "summary": "Gets availability set by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.AvailabilitySetId"
          }
        ],
        "responses": {
          "200": {
            "description": "Availability set identified by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.AvailabilitySet"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/resourceGroups": {
      "get": {
        "operationId": "azure_service.api.resource_groups.get",
        "summary": "Lists resource groups",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of resource groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/azure.ResourceGroup"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "post": {
        "operationId": "azure_service.api.resource_groups.post",
        "summary": "Creates new resource group",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.CreateResourceGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New resource group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.ResourceGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/flavors": {
      "get": {
        "operationId": "azure_service.api.flavors.get",
        "summary": "Lists flavors for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of flavors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/azure.Flavor"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/flavors/{flavor_id}": {
      "get": {
        "operationId": "azure_service.api.flavor.get",
        "summary": "Gets a single flavor by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.FlavorId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single flavor identified by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.Flavor"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms": {
      "get": {
        "operationId": "azure_service.api.vms.get",
        "summary": "Lists virtual machines for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterAvailabilitySetId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterAvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of virtual machines",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/azure.VMSimple"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "post": {
        "operationId": "azure_service.api.vms.post",
        "summary": "Provisions virtual machine according to specified parameters",
        "description": "May provision managed or unmanaged virtual machine in accordance to the `managementToolId` property. If such is set and points to valid `management tool`, virtual machine will have aformentioned tool deployed and it will be possible to install the application on it.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          }
        ],
        "requestBody": {
          "description": "Parameters for the new virtual machine",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.VMCreateData"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/azure.VMExtended"
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms/{vm_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/azure.SubscriptionId"
        },
        {
          "$ref": "#/components/parameters/azure.VMId"
        }
      ],
      "get": {
        "operationId": "azure_service.api.vm.get",
        "summary": "Gets a single virtual machine by ID",
        "responses": {
          "200": {
            "$ref": "#/components/responses/azure.VMExtended"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "patch": {
        "operationId": "azure_service.api.vm.patch",
        "summary": "Modifies specified virtual machine",
        "requestBody": {
          "description": "Virtual machine object to modify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.VMPatch"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Modified virtual machine"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "delete": {
        "operationId": "azure_service.api.vm.delete",
        "summary": "Deletes a single virtual machine by ID",
        "description": "Endpoint takes care of deleting the virtual machine from the platform.\nIt also removes:\n\n- OS volume\n- all network interfaces\n- management if VM was managed by management tool\n- workshift if VM had one\n- initial password if VM was provisioned with one\n",
        "responses": {
          "204": {
            "description": "VM deleted"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms/{vm_id}/workshift": {
      "post": {
        "summary": "Add a workshift to the VM",
        "description": "Create a VM Workshift",
        "operationId": "azure_service.api.vm_workshift.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          }
        ],
        "requestBody": {
          "description": "Workshift object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.Workshift"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Workshift created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.Workshift"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "put": {
        "summary": "Update VM Workshift",
        "description": "Update a VM Workshift",
        "operationId": "azure_service.api.vm_workshift.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          }
        ],
        "requestBody": {
          "description": "Workshift object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.Workshift"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workshift created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.Workshift"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "delete": {
        "summary": "Delete VM Workshift",
        "description": "Delete VM Workshift",
        "operationId": "azure_service.api.vm_workshift.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          }
        ],
        "responses": {
          "204": {
            "description": "Workshift deleted"
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms/{vm_id}/management": {
      "get": {
        "operationId": "azure_service.api.vm_management.get",
        "summary": "Gets specified virtual machine management status",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single virtual machine identified by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.ManagementStatus"
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms/{vm_id}/command/{action}": {
      "put": {
        "operationId": "azure_service.api.vm_command.put",
        "summary": "Executes power action on a VM",
        "description": "Executes power action on a VM. Only specified VMPowerAction are allowed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          },
          {
            "$ref": "#/components/parameters/azure.VMPowerAction"
          }
        ],
        "responses": {
          "202": {
            "description": "Volume was updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "409": {
            "$ref": "#/components/responses/azure.Conflict"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms/{vm_id}/password": {
      "get": {
        "operationId": "azure_service.api.vm_password.get",
        "summary": "Gets specified virtual machine encrypted password",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machine encrypted password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.EncryptedPassword"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms/{vm_id}/details": {
      "get": {
        "operationId": "azure_service.api.vm_details.get",
        "summary": "Gets specified virtual machine details",
        "description": "If specified virtual machine is provision with enabled management details will contain information gathered by management tool. Aither way it will contains basic information\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machine details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/azure.VmDetails"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "409": {
            "$ref": "#/components/responses/azure.Conflict"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/volumes": {
      "get": {
        "operationId": "azure_service.api.volumes.get",
        "summary": "Lists volumes for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterVolumeStatus"
          },
          {
            "$ref": "#/components/parameters/azure.FilterIsOsDisk"
          },
          {
            "$ref": "#/components/parameters/azure.FilterAvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of volumes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "$ref": "#/components/schemas/azure.Volume"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "post": {
        "operationId": "azure_service.api.volumes.post",
        "summary": "Creates new volume",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.CreateVolume"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New volume",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.Volume"
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/volumes/{volume_id}": {
      "get": {
        "operationId": "azure_service.api.volume.get",
        "summary": "Gets a single volume by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VolumeId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single volume identified by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.Volume"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "patch": {
        "operationId": "azure_service.api.volume.patch",
        "summary": "Modify volume properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VolumeId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.PatchVolume"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Volume was updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "409": {
            "$ref": "#/components/responses/azure.Conflict"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "delete": {
        "operationId": "azure_service.api.volume.delete",
        "summary": "Removes volume",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VolumeId"
          }
        ],
        "responses": {
          "204": {
            "description": "Volume was removed successfully"
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "409": {
            "$ref": "#/components/responses/azure.Conflict"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/volumes/{volume_id}/attach": {
      "put": {
        "operationId": "azure_service.api.volume_attachment.put",
        "summary": "Attaches volume",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VolumeId"
          },
          {
            "$ref": "#/components/parameters/azure.VMIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Volume attached to the VM successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.VolumeAttachment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/volumes/{volume_id}/detach": {
      "delete": {
        "operationId": "azure_service.api.volume_attachment.delete",
        "summary": "Dettaches volume",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VolumeId"
          },
          {
            "$ref": "#/components/parameters/azure.VMIdQuery"
          }
        ],
        "responses": {
          "204": {
            "description": "Volume detached from the VM successfully"
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/volumeTypes": {
      "get": {
        "operationId": "azure_service.api.volume_types.get",
        "summary": "Lists volume types",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterIsOsCompatible"
          },
          {
            "$ref": "#/components/parameters/azure.FilterAvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of volume types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "$ref": "#/components/schemas/azure.VolumeType"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms/{vm_id}/assignFloatingIp": {
      "put": {
        "operationId": "azure_service.api.vm_floating_ip.put",
        "summary": "Assigns a floating public IP v4 to specified VM",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          }
        ],
        "responses": {
          "201": {
            "description": "Assigned floating IP to a VM",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.VmFloatingIp"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms/{vm_id}/unassignFloatingIp": {
      "delete": {
        "operationId": "azure_service.api.vm_floating_ip.delete",
        "summary": "Unassigns floating public IP from specified VM",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          }
        ],
        "responses": {
          "204": {
            "description": "Unassigned floating IP from VM"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms/{vm_id}/securityGroups/{security_group_id}": {
      "put": {
        "operationId": "azure_service.api.vm_security_groups.put",
        "summary": "Assigns a new network security group and unassigns old one",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          },
          {
            "$ref": "#/components/parameters/azure.SecurityGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "Security group is already assigned to VM"
          },
          "201": {
            "description": "Assigned security group to a VM and unasigned old one"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "delete": {
        "operationId": "azure_service.api.vm_security_groups.delete",
        "summary": "Unassigns specified security group from specified VM",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          },
          {
            "$ref": "#/components/parameters/azure.SecurityGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "Security group is not assign to this VM"
          },
          "204": {
            "description": "Unassigned security group from a VM"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/vms/{vm_id}/setTag": {
      "put": {
        "operationId": "azure_service.api.vm_tag.put",
        "summary": "Sets/unsets tag in virtual machine",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.VMId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.TagUpdate"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Tag successfully set/unset in VM"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/keypairs": {
      "get": {
        "operationId": "azure_service.api.keypairs.get",
        "summary": "Lists keypairs",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterAvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of keypairs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "$ref": "#/components/schemas/azure.Keypair"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/keypairs/{keypair_id}": {
      "get": {
        "operationId": "azure_service.api.keypair.get",
        "summary": "Gets a single keypair",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.KeypairId"
          }
        ],
        "responses": {
          "200": {
            "description": "Single keypair",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.Keypair"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "delete": {
        "operationId": "azure_service.api.keypair.delete",
        "summary": "Delets a single keypair",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.KeypairId"
          }
        ],
        "responses": {
          "204": {
            "description": "Keypair was deleted"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/keypairs/generate": {
      "post": {
        "operationId": "azure_service.api.keypair_generate.post",
        "summary": "Generate a new keypair",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.KeypairGenerate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generated keypair",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.GeneratedKeypair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/keypairs/import": {
      "post": {
        "operationId": "azure_service.api.keypair_import.post",
        "summary": "Import a public key",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.KeypairImport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generated keypair",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.Keypair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/networks": {
      "get": {
        "operationId": "azure_service.api.networks.get",
        "summary": "List networks for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterAvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of networks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/azure.Network"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/networks/{network_id}/subnets": {
      "get": {
        "operationId": "azure_service.api.network_subnets.get",
        "summary": "Lists subnets for specified network and subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.NetworkId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterAvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of subnets for specified network",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/azure.Subnet"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/interfaces": {
      "get": {
        "operationId": "azure_service.api.interfaces.get",
        "summary": "Lists interfaces for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterVMId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterNetworkId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterSubnetId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of interfaces",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/azure.Interface"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/securityGroups": {
      "get": {
        "operationId": "azure_service.api.security_groups.get",
        "summary": "Lists security groups for specified subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterVMId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of security groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/azure.SecurityGroup"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/snapshots": {
      "get": {
        "summary": "Get list of all snapshots",
        "operationId": "azure_service.api.snapshots.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.FilterVMId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/azure.Snapshot"
                  }
                }
              }
            }
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      },
      "post": {
        "summary": "Create a new snapshot",
        "operationId": "azure_service.api.snapshots.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          }
        ],
        "requestBody": {
          "description": "A create snapshot object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/azure.CreateSnapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Snapshot created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/azure.Snapshot"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/azure.BadRequest"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "422": {
            "$ref": "#/components/responses/azure.UnprocessableEntity"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/azure/compute/snapshots/{snapshot_id}": {
      "delete": {
        "summary": "Delete snapshot",
        "operationId": "azure_service.api.snapshot.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/azure.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/azure.SnapshotId"
          }
        ],
        "responses": {
          "204": {
            "description": "Snapshot deleted successfully"
          },
          "404": {
            "$ref": "#/components/responses/azure.NotFound"
          },
          "408": {
            "$ref": "#/components/responses/azure.Timeout"
          },
          "503": {
            "$ref": "#/components/responses/azure.ServiceUnavailable"
          },
          "default": {
            "$ref": "#/components/responses/azure.UnexpectedError"
          }
        },
        "tags": [
          "azure"
        ]
      }
    },
    "/api/v1/aws/compute/availabilityZones": {
      "get": {
        "description": "List all availability zones",
        "operationId": "aws_service.api.availability_zones.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.AvailabilityZone"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of availability zones"
          }
        },
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/flavors": {
      "get": {
        "operationId": "aws_service.api.flavors.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.Flavor"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Lists flavors",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/flavors/{flavor_id}": {
      "get": {
        "operationId": "aws_service.api.flavor.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.FlavorId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Flavor"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          }
        },
        "summary": "Get flavor by id",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/images/{image_id}": {
      "get": {
        "deprecated": true,
        "operationId": "aws_service.api.image.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.ImageId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Image"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets image by id",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/interfaces": {
      "get": {
        "operationId": "aws_service.api.interfaces.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.FilterVmId"
          },
          {
            "$ref": "#/components/parameters/aws.FilterNetworkId"
          },
          {
            "$ref": "#/components/parameters/aws.FilterSubnetId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.Interface"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of interfaces"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets interfaces for specified subscription",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/keypairs": {
      "get": {
        "operationId": "aws_service.api.keypairs.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZone"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.Keypair"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Lists keypairs",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/keypairs/generate": {
      "post": {
        "operationId": "aws_service.api.keypair_generate.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.CreateKeypair"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Keypair"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Create a new keypair",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/keypairs/import": {
      "post": {
        "operationId": "aws_service.api.keypair_import.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.ImportKeypair"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "applicaiton/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Keypair"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Import a new public key",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/keypairs/{keypair_id}": {
      "delete": {
        "operationId": "aws_service.api.keypair.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.KeypairId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Delete keypair by id",
        "tags": [
          "aws"
        ]
      },
      "get": {
        "operationId": "aws_service.api.keypair.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.KeypairId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Keypair"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Get keypair by id",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/networks": {
      "get": {
        "operationId": "aws_service.api.networks.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZone"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.Network"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets list of all networks",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/networks/{network_id}/subnets": {
      "get": {
        "operationId": "aws_service.api.network_subnets.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.NetworkId"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZoneId"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.Subnet"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Lists subnets of specified network and subscription",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/privateImages": {
      "get": {
        "operationId": "aws_service.api.private_images.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.ImageNameFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.Image"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Lists private images",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/privateImages/{image_id}": {
      "get": {
        "operationId": "aws_service.api.private_image.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.ImageId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Image"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets private image by id",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/publicImages": {
      "get": {
        "operationId": "aws_service.api.public_images.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.ImageNameFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.Image"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Lists public images",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/publicImages/{image_id}": {
      "get": {
        "operationId": "aws_service.api.public_image.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.ImageId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Image"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets public image by id",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/regions": {
      "get": {
        "description": "Lists regions",
        "operationId": "aws_service.api.regions.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.OptionalSubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.Region"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of regions"
          }
        },
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/securityGroups": {
      "get": {
        "operationId": "aws_service.api.security_groups.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.FilterVmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.SecurityGroup"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of security groups"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Lists security groups for specified subscription",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/snapshots": {
      "get": {
        "operationId": "aws_service.api.snapshots.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.FilterVmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.Snapshot"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of snapshots"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Lists snapshots",
        "tags": [
          "aws"
        ]
      },
      "post": {
        "operationId": "aws_service.api.snapshots.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.CreateSnapshotParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Snapshot"
                }
              }
            },
            "description": "Created snapshot"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Creates a new snapshot",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/snapshots/{snapshot_id}": {
      "delete": {
        "operationId": "aws_service.api.snapshot.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.SnapshotId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Deletes snapshots",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/validateSubscription": {
      "post": {
        "description": "Validate subscription credentials",
        "operationId": "aws_service.api.validate_subscription.post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.ValidateSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          }
        },
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/vms": {
      "get": {
        "operationId": "aws_service.api.vms.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZoneId"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.VMSimple"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets list of all vms",
        "tags": [
          "aws"
        ]
      },
      "post": {
        "description": "Create a new virtual machine",
        "operationId": "aws_service.api.vms.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.VMCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.VMExtended"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          },
          "504": {
            "$ref": "#/components/responses/aws.GatewayTiemout"
          }
        },
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/vms/{vm_id}": {
      "delete": {
        "operationId": "aws_service.api.vm.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Deletes VM by id",
        "tags": [
          "aws"
        ]
      },
      "get": {
        "operationId": "aws_service.api.vm.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.VMExtended"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets vm by id",
        "tags": [
          "aws"
        ]
      },
      "patch": {
        "operationId": "aws_service.api.vm.patch",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.UpdateVmParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "409": {
            "$ref": "#/components/responses/aws.Conflict"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Modify VM properties",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/vms/{vm_id}/command/{action}": {
      "put": {
        "operationId": "aws_service.api.vm_command.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          },
          {
            "$ref": "#/components/parameters/aws.Action"
          }
        ],
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "409": {
            "$ref": "#/components/responses/aws.Conflict"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Excecutes power action on a VM",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/vms/{vm_id}/details": {
      "get": {
        "operationId": "aws_service.api.vm_details.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.VMDetail"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of VM details"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets VM details",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/vms/{vm_id}/management": {
      "get": {
        "operationId": "aws_service.api.vm_management.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.ManagementStatus"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets management status for a VM",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/vms/{vm_id}/password": {
      "get": {
        "description": "Get encrypted password for a VM",
        "operationId": "aws_service.api.vm_password.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.EncryptedPassword"
                }
              }
            },
            "description": "Object with encrypted password"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/vms/{vm_id}/securityGroups/{security_group_id}": {
      "delete": {
        "operationId": "aws_service.api.vm_security_group.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          },
          {
            "$ref": "#/components/parameters/aws.SecurityGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "Security group was not assigned assigned to VM"
          },
          "201": {
            "description": "Security group was removed from VM"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Removes Security Group from a specified VM",
        "tags": [
          "aws"
        ]
      },
      "put": {
        "operationId": "aws_service.api.vm_security_group.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          },
          {
            "$ref": "#/components/parameters/aws.SecurityGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "Security group is already assigned to VM"
          },
          "201": {
            "description": "Security group was assigned to VM"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Assign Security Group to a specified VM",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/vms/{vm_id}/setTag": {
      "put": {
        "operationId": "aws_service.api.vm_tag.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.TagUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Set tag value for VM",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/vms/{vm_id}/workshift": {
      "delete": {
        "operationId": "aws_service.api.vm_workshift.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          }
        ],
        "responses": {
          "204": {
            "description": "Workshift deleted"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Delete VM Workshift",
        "tags": [
          "aws"
        ]
      },
      "post": {
        "operationId": "aws_service.api.vm_workshift.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.Workshift"
              }
            }
          },
          "description": "Workshift object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Workshift"
                }
              }
            },
            "description": "Workshift created successfully"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Add a workshift to the VM",
        "tags": [
          "aws"
        ]
      },
      "put": {
        "operationId": "aws_service.api.vm_workshift.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VmId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.Workshift"
              }
            }
          },
          "description": "Workshift object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Workshift"
                }
              }
            },
            "description": "Workshift updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Update VM Workshift",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/volumeTypes": {
      "get": {
        "operationId": "aws_service.api.volume_types.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.IsOSCompatible"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.VolumeType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets a list of all volume types user can create volume with",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/volumes": {
      "get": {
        "operationId": "aws_service.api.volumes.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZoneId"
          },
          {
            "$ref": "#/components/parameters/aws.AvailabilityZone"
          },
          {
            "$ref": "#/components/parameters/aws.VolumeStatus"
          },
          {
            "$ref": "#/components/parameters/aws.IsOSDisk"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/aws.Volume"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets list of all volumes",
        "tags": [
          "aws"
        ]
      },
      "post": {
        "operationId": "aws_service.api.volumes.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.CreateVolumeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Volume"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Creates a new EBS volume",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/volumes/{volume_id}": {
      "delete": {
        "operationId": "aws_service.api.volume.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VolumeId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Deletes volume by id",
        "tags": [
          "aws"
        ]
      },
      "get": {
        "operationId": "aws_service.api.volume.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VolumeId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.Volume"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Gets volume by id",
        "tags": [
          "aws"
        ]
      },
      "patch": {
        "operationId": "aws_service.api.volume.patch",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VolumeId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/aws.UpdateVolumeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Volume was updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "409": {
            "$ref": "#/components/responses/aws.Conflict"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "summary": "Modify volume properties",
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/volumes/{volume_id}/attach": {
      "put": {
        "description": "Attach volume to specified VM",
        "operationId": "aws_service.api.volume_attachment.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VolumeId"
          },
          {
            "$ref": "#/components/parameters/aws.VmIdQuery"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/aws.NewVolumeAttachment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "409": {
            "$ref": "#/components/responses/aws.Conflict"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "tags": [
          "aws"
        ]
      }
    },
    "/api/v1/aws/compute/volumes/{volume_id}/detach": {
      "delete": {
        "description": "Detach volume from a specified vm",
        "operationId": "aws_service.api.volume_attachment.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/aws.SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/aws.VolumeId"
          },
          {
            "$ref": "#/components/parameters/aws.VmIdQuery"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/aws.BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/aws.Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/aws.NotFound"
          },
          "500": {
            "$ref": "#/components/responses/aws.UnexpectedError"
          }
        },
        "tags": [
          "aws"
        ]
      }
    }
  },
  "components": {
    "responses": {
      "analytics.InternalError": {
        "description": "Poor Implementation",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/analytics.Error"
            }
          }
        }
      },
      "analytics.BadRequest": {
        "description": "Bad request parameters/data",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/analytics.BadRequest"
            }
          }
        }
      },
      "config.500Error": {
        "description": "An unexpected error occurred",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/config.UnexpectedError"
            }
          }
        }
      },
      "subscr.InternalError": {
        "description": "Internal error",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/subscr.Error"
            }
          }
        }
      },
      "subscr.BadRequest": {
        "description": "Bad request parameters/data",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/subscr.BadRequest"
            }
          }
        }
      },
      "mgmt.InternalError": {
        "description": "Internal error",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/mgmt.Error"
            }
          }
        }
      },
      "mgmt.BadRequest": {
        "description": "Bad request parameters/data",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/mgmt.BadRequest"
            }
          }
        }
      },
      "img_whitelist.500Error": {
        "description": "An unexpected error occurred",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/img_whitelist.HttpError"
            }
          }
        }
      },
      "azure.VMExtended": {
        "description": "Single virtual machine identified by ID",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/azure.VMExtended"
            }
          }
        }
      },
      "azure.Timeout": {
        "description": "There was a timeout when processing the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/azure.Error"
            }
          }
        }
      },
      "azure.NotFound": {
        "description": "Object was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/azure.Error"
            }
          }
        }
      },
      "azure.Conflict": {
        "description": "Resource is not in desired state",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/azure.Error"
            }
          }
        }
      },
      "azure.UnprocessableEntity": {
        "description": "Server was able to read the request but the instructions are not correct",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/azure.Error"
            }
          }
        }
      },
      "azure.ServiceUnavailable": {
        "description": "Service is unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/azure.Error"
            }
          }
        }
      },
      "azure.UnexpectedError": {
        "description": "Service encountered an error it does not know how to handle",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/azure.Error"
            }
          }
        }
      },
      "azure.BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/azure.Error"
            }
          }
        }
      },
      "aws.BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/aws.Error"
            }
          }
        },
        "description": "Bad request"
      },
      "aws.Conflict": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/aws.Error"
            }
          }
        },
        "description": "Object is in conflict state"
      },
      "aws.Forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/aws.Error"
            }
          }
        },
        "description": "Operation is forbidden"
      },
      "aws.GatewayTiemout": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/aws.Error"
            }
          }
        },
        "description": "There was a timeout inside of cluster"
      },
      "aws.NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/aws.Error"
            }
          }
        },
        "description": "Object was not found"
      },
      "aws.ServiceUnavailable": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/aws.Error"
            }
          }
        },
        "description": "Service is unavailable"
      },
      "aws.Timeout": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/aws.Error"
            }
          }
        },
        "description": "There was a timeout when processing the request"
      },
      "aws.UnexpectedError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/aws.Error"
            }
          }
        },
        "description": "Service encountered an error it does not know how to handle"
      },
      "aws.UnprocessableEntity": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/aws.Error"
            }
          }
        },
        "description": "Server was able to read the request but the instructions are not correct"
      }
    },
    "schemas": {
      "analytics.Metric": {
        "type": "object",
        "description": "Metric with date and value fields",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "integer",
            "description": "Metric value"
          }
        }
      },
      "analytics.Metrics": {
        "type": "object",
        "properties": {
          "totalStorageUsage": {
            "type": "array",
            "description": "Total disk usage",
            "items": {
              "$ref": "#/components/schemas/analytics.Metric"
            }
          },
          "totalComputeInstances": {
            "type": "array",
            "description": "Total number of VMs",
            "items": {
              "$ref": "#/components/schemas/analytics.Metric"
            }
          },
          "totalMemoryUsage": {
            "type": "array",
            "description": "Total memory usage",
            "items": {
              "$ref": "#/components/schemas/analytics.Metric"
            }
          }
        }
      },
      "analytics.PlatformMetrics": {
        "type": "object",
        "properties": {
          "vms": {
            "type": "integer",
            "description": "Total number of VMs"
          },
          "memory": {
            "type": "integer",
            "description": "Current memory usage"
          },
          "storage": {
            "type": "integer",
            "description": "Current storage usage"
          },
          "vcpus": {
            "type": "integer",
            "description": "Amount of virtual CPU"
          }
        }
      },
      "analytics.Summary": {
        "type": "object",
        "properties": {
          "subscriptions": {
            "type": "integer",
            "description": "Total number of subscriptions"
          },
          "platforms": {
            "type": "integer",
            "description": "Number of platforms with valid subscriptions"
          }
        }
      },
      "analytics.SummaryUsage": {
        "type": "object",
        "properties": {
          "memoryUsage": {
            "type": "integer",
            "description": "Total memory usage"
          },
          "networkTraffic": {
            "type": "integer",
            "description": "Total network traffic"
          },
          "storageUsage": {
            "type": "integer",
            "description": "Total storage usage"
          }
        }
      },
      "analytics.PlatformsUsage": {
        "type": "object",
        "properties": {
          "k5": {
            "type": "number",
            "description": "Percentage platform usage"
          },
          "vmware": {
            "type": "number",
            "description": "Percentage platform usage"
          },
          "azure": {
            "type": "number",
            "description": "Percentage platform usage"
          },
          "openstack": {
            "type": "number",
            "description": "Percentage platform usage"
          },
          "aws": {
            "type": "number",
            "description": "Percentage platform usage"
          }
        }
      },
      "analytics.OperatingSystems": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/analytics.OperatingSystem"
        }
      },
      "analytics.OperatingSystem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Operating system"
          },
          "value": {
            "type": "integer",
            "description": "amount of servers"
          }
        }
      },
      "analytics.Error": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "analytics.BadRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "auth.Credentials": {
        "properties": {
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ],
        "type": "object"
      },
      "auth.Error": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object",
        "x-error": true
      },
      "auth.Forbidden": {
        "$ref": "#/components/schemas/auth.Error"
      },
      "auth.InvalidCredentials": {
        "$ref": "#/components/schemas/auth.Error"
      },
      "auth.InvalidInput": {
        "$ref": "#/components/schemas/auth.Error"
      },
      "auth.NotFound": {
        "$ref": "#/components/schemas/auth.Error"
      },
      "auth.SamlConfig": {
        "properties": {
          "certificate": {
            "type": "string"
          },
          "emailAttribute": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          },
          "groupsAttribute": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "providerId": {
            "maxLength": 32,
            "minLength": 1,
            "pattern": "^[a-z0-9]+(-[a-z0-9]+)*$",
            "type": "string"
          },
          "redirectURL": {
            "readOnly": true,
            "type": "string"
          },
          "ssoURL": {
            "type": "string"
          },
          "usernameAttribute": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "ssoURL",
          "providerId",
          "certificate",
          "name",
          "usernameAttribute",
          "emailAttribute",
          "groupsAttribute"
        ],
        "type": "object"
      },
      "auth.SamlConfigs": {
        "items": {
          "$ref": "#/components/schemas/auth.SamlConfig"
        },
        "type": "array"
      },
      "auth.Token": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "auth.UnexpectedError": {
        "$ref": "#/components/schemas/auth.Error"
      },
      "user.AccessRight": {
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/user.Permissions"
          },
          "subscriptionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "user.AccessRights": {
        "items": {
          "$ref": "#/components/schemas/user.AccessRight"
        },
        "type": "array"
      },
      "user.Credentials": {
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "$ref": "#/components/schemas/user.Password"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "type": "object"
      },
      "user.Error": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object",
        "x-error": true
      },
      "user.Forbidden": {
        "$ref": "#/components/schemas/user.Error"
      },
      "user.ForgottenPassword": {
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "user.InvalidCredentials": {
        "$ref": "#/components/schemas/user.Error"
      },
      "user.InvalidInput": {
        "$ref": "#/components/schemas/user.Error"
      },
      "user.NotFound": {
        "$ref": "#/components/schemas/user.Error"
      },
      "user.Password": {
        "format": "password",
        "maxLength": 72,
        "minLength": 12,
        "type": "string"
      },
      "user.PasswordReset": {
        "properties": {
          "email": {
            "type": "string"
          },
          "newPassword": {
            "$ref": "#/components/schemas/user.Password"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "token",
          "newPassword"
        ],
        "type": "object"
      },
      "user.PasswordUpdate": {
        "properties": {
          "currentPassword": {
            "$ref": "#/components/schemas/user.Password"
          },
          "newPassword": {
            "$ref": "#/components/schemas/user.Password"
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ],
        "type": "object"
      },
      "user.Permissions": {
        "enum": [
          "read",
          "write",
          "delete"
        ],
        "type": "string"
      },
      "user.RoleUpdate": {
        "properties": {
          "role": {
            "enum": [
              "admin",
              "user"
            ],
            "type": "string"
          }
        },
        "required": [
          "role"
        ],
        "type": "object"
      },
      "user.ServiceUnavailable": {
        "$ref": "#/components/schemas/user.Error"
      },
      "user.SubscriptionID": {
        "properties": {
          "subId": {
            "type": "string"
          }
        },
        "required": [
          "subId"
        ],
        "type": "object"
      },
      "user.Token": {
        "properties": {
          "email": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "token"
        ],
        "type": "object"
      },
      "user.Unauthorized": {
        "$ref": "#/components/schemas/user.Error"
      },
      "user.UnexpectedError": {
        "$ref": "#/components/schemas/user.Error"
      },
      "user.UpdateUser": {
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "user.User": {
        "properties": {
          "accessRights": {
            "$ref": "#/components/schemas/user.AccessRights"
          },
          "email": {
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "isInternal": {
            "type": "boolean"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "role": {
            "enum": [
              "admin",
              "user"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "email",
          "role"
        ],
        "type": "object"
      },
      "user.Users": {
        "items": {
          "$ref": "#/components/schemas/user.User"
        },
        "type": "array"
      },
      "config.PlatformConfig": {
        "type": "object",
        "properties": {
          "platformId": {
            "type": "string",
            "description": "platform id"
          },
          "value": {
            "type": "boolean",
            "description": "Specifies if platform is enabled"
          }
        }
      },
      "config.PlatformConfigs": {
        "type": "array",
        "description": "List of configurations for platforms",
        "items": {
          "$ref": "#/components/schemas/config.PlatformConfig"
        }
      },
      "config.Configuration": {
        "type": "object",
        "description": "Configuration to set",
        "properties": {
          "configuration": {
            "type": "array",
            "description": "List of configurations for platforms",
            "items": {
              "$ref": "#/components/schemas/config.PlatformConfig"
            }
          }
        }
      },
      "config.MailProvider": {
        "type": "object",
        "description": "Default mail provider",
        "required": [
          "name",
          "service"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for a provider instance"
          },
          "service": {
            "type": "string",
            "description": "\"aws_ses\""
          },
          "accessKey": {
            "type": "string",
            "description": "Access key credentaials for AWS SES service"
          },
          "secretKey": {
            "type": "string",
            "description": "Secret access key credentaials for AWS SES service"
          },
          "regionId": {
            "type": "string",
            "description": "Region for AWS SES service (optional parameter)"
          }
        }
      },
      "config.UnexpectedError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "default": 500
          },
          "exec_info": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "config.ManagementToolType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "x-deprecated": true
          },
          "value": {
            "type": "string",
            "x-deprecated": true
          }
        }
      },
      "config.ManagementToolTypes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/config.ManagementToolType"
        }
      },
      "config.ManagementTool": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "x-deprecated": true
          },
          "toolTypeId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "endpointUrl": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "config.ManagementTools": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/config.ManagementTool"
        }
      },
      "config.CreateManagementTool": {
        "type": "object",
        "required": [
          "name",
          "endpointUrl"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "x-deprecated": true
          },
          "toolTypeId": {
            "type": "string"
          },
          "endpointUrl": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "config.UpdateManagementTool": {
        "type": "object",
        "required": [
          "name",
          "endpointUrl"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "endpointUrl": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "subscr.Subscriptions": {
        "type": "array",
        "description": "List of subscriptions",
        "items": {
          "$ref": "#/components/schemas/subscr.Subscription"
        }
      },
      "subscr.Subscription": {
        "type": "object",
        "required": [
          "id",
          "platformId",
          "name",
          "ownerId",
          "regionId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of a subscription",
            "readOnly": true
          },
          "platformId": {
            "type": "string",
            "description": "Id of a platform"
          },
          "name": {
            "type": "string",
            "description": "Name of a subscription"
          },
          "regionId": {
            "type": "string",
            "description": "Region of a subscription"
          },
          "ownerId": {
            "type": "string",
            "description": "Id of a subscription owner",
            "readOnly": true
          },
          "provisioning": {
            "type": "boolean",
            "description": "States if provisioning is enabled",
            "x-deprecated": true
          },
          "createdAt": {
            "type": "string",
            "description": "Date when subscription was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of last subscription update",
            "readOnly": true
          },
          "contractId": {
            "type": "string",
            "description": "Subscription contract id for OpenStack|K5 account"
          },
          "projectId": {
            "type": "string",
            "description": "Project ID for OpenStack|K5"
          },
          "username": {
            "type": "string",
            "description": "Subscription username for OpenStack|K5|VMware subscription"
          },
          "password": {
            "type": "string",
            "description": "Password for a subscription for OpenStack|K5|VMware subscription"
          },
          "accessKey": {
            "type": "string",
            "description": "Access key ID for AWS/Azure subscriptions. Parameter for AWS/Azure subscriptions only"
          },
          "secretKey": {
            "type": "string",
            "description": "Secret access key for AWS/Azure subscriptions. Parameter for AWS/Azure subscriptions only"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID for Azure."
          },
          "platformSubscriptionId": {
            "type": "string",
            "description": "Subscription ID for Azure."
          },
          "authenticationUrl": {
            "type": "string",
            "description": "The URL which is used for authentication and token generation. Parameter for VMware subscription only"
          },
          "apiUrl": {
            "type": "string",
            "description": "The URL which is used for communication with vRO API. Parameter for VMware subscription only"
          },
          "policy": {
            "$ref": "#/components/schemas/subscr.Policy"
          }
        }
      },
      "subscr.Token": {
        "type": "object",
        "description": "Subscription token",
        "properties": {
          "token": {
            "type": "string",
            "description": "token"
          },
          "services": {
            "type": "object",
            "description": "URLs to the platform services",
            "properties": {
              "compute": {
                "type": "string"
              },
              "volumev2": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "cloudformation": {
                "type": "string"
              },
              "orchestration": {
                "type": "string"
              },
              "network": {
                "type": "string"
              },
              "identity": {
                "type": "string"
              },
              "volume": {
                "type": "string"
              }
            }
          },
          "domainId": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "subscriptionId": {
            "type": "string",
            "description": "Id of a subscription",
            "readOnly": true
          },
          "subscriptionName": {
            "type": "string",
            "description": "Name of a subscription"
          },
          "provisioning": {
            "type": "boolean",
            "description": "States if provisioning is enabled",
            "x-deprecated": true
          }
        }
      },
      "subscr.CreateSubscription": {
        "type": "object",
        "required": [
          "platformId",
          "name",
          "policy",
          "regionId"
        ],
        "properties": {
          "platformId": {
            "type": "string",
            "description": "Id of a platform"
          },
          "name": {
            "type": "string",
            "description": "Name of a subscription. Must be 1 to 32 char long, no trailing whitespace allowed.",
            "pattern": "^[\\w-][\\w -]{,31}(?<! )$"
          },
          "provisioning": {
            "type": "boolean",
            "description": "States if provisioning is enabled",
            "x-deprecated": true
          },
          "contractId": {
            "type": "string",
            "description": "Subscription contract id for OpenStack|K5 account"
          },
          "projectId": {
            "type": "string",
            "description": "Project ID for OpenStack|K5 platform"
          },
          "username": {
            "type": "string",
            "description": "Subscription username for OpenStack|K5|Vmware subscription"
          },
          "password": {
            "type": "string",
            "description": "Password for a subscription for Openstack|K5|VMware subscription"
          },
          "accessKey": {
            "type": "string",
            "description": "Access key ID for AWS subscription. Parameter for AWS subscription only"
          },
          "secretKey": {
            "type": "string",
            "description": "Secret access key for AWS subscription. Parameter for AWS subscription only"
          },
          "platformSubscriptionId": {
            "type": "string",
            "description": "Platform subscription ID for Azure subscription. Parameter for Azure subscription"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID in Azure subscription. Parameter for Azure subscription"
          },
          "authenticationUrl": {
            "type": "string",
            "description": "The URL which is used for authentication and token generation. Parameter for VMware subscription only"
          },
          "apiUrl": {
            "type": "string",
            "description": "The URL which is used for communication with vRO API. Parameter for VMware subscription only"
          },
          "policy": {
            "$ref": "#/components/schemas/subscr.Policy"
          },
          "regionId": {
            "type": "string",
            "description": "Region of a subscription"
          }
        }
      },
      "subscr.ModifySubscription": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of a subscription. Must be 1 to 32 char long, no trailing whitespace allowed.",
            "pattern": "^[\\w-][\\w -]{,31}(?<! )$"
          },
          "username": {
            "type": "string",
            "description": "Subscription username for OpenStack|K5|VMware subscription"
          },
          "password": {
            "type": "string",
            "description": "Password for a subscription for Openstack|K5|VMware subscription"
          },
          "provisioning": {
            "type": "boolean",
            "description": "States if provisioning is enabled",
            "x-deprecated": true
          },
          "contractId": {
            "type": "string",
            "description": "Subscription contract id for OpenStack|K5 account",
            "x-deprecated": true
          },
          "accessKey": {
            "type": "string",
            "description": "Access key ID for AWS subscription. Parameter for AWS subscription only",
            "x-deprecated": true
          },
          "secretKey": {
            "type": "string",
            "description": "Secret access key for AWS subscription. Parameter for AWS subscription only",
            "x-deprecated": true
          },
          "platformSubscriptionId": {
            "type": "string",
            "description": "Platform subscription ID for Azure subscription. Parameter for Azure subscription",
            "x-deprecated": true
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID in Azure subscription. Parameter for Azure subscription",
            "x-deprecated": true
          },
          "policy": {
            "$ref": "#/components/schemas/subscr.Policy"
          }
        }
      },
      "subscr.VirtualMachineValidationParameters": {
        "type": "object",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/subscr.Policy"
          },
          "vm": {
            "$ref": "#/components/schemas/subscr.VirtualMachine"
          }
        }
      },
      "subscr.WorkshiftValidationParameters": {
        "type": "object",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/subscr.Policy"
          },
          "workshift": {
            "$ref": "#/components/schemas/subscr.Workshift"
          }
        }
      },
      "subscr.Policy": {
        "type": "object",
        "description": "Policy definition",
        "properties": {
          "management": {
            "$ref": "#/components/schemas/subscr.Status"
          },
          "monitoring": {
            "$ref": "#/components/schemas/subscr.Status"
          },
          "backup": {
            "$ref": "#/components/schemas/subscr.Status"
          },
          "patching": {
            "$ref": "#/components/schemas/subscr.Status"
          },
          "workloadManagement": {
            "$ref": "#/components/schemas/subscr.Status"
          },
          "workshiftRule": {
            "$ref": "#/components/schemas/subscr.WorkshiftRule"
          }
        }
      },
      "subscr.VirtualMachine": {
        "type": "object",
        "properties": {
          "managementEnabled": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/subscr.Tag"
            }
          },
          "workshift": {
            "$ref": "#/components/schemas/subscr.Workshift"
          }
        }
      },
      "subscr.WorkshiftRule": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/subscr.Status"
          },
          "defaultWorkshift": {
            "$ref": "#/components/schemas/subscr.Workshift"
          }
        }
      },
      "subscr.Workshift": {
        "type": "object",
        "description": "Workshift definition",
        "properties": {
          "start": {
            "$ref": "#/components/schemas/subscr.WorkshiftSchedule"
          },
          "stop": {
            "$ref": "#/components/schemas/subscr.WorkshiftSchedule"
          }
        },
        "nullable": true
      },
      "subscr.Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "subscr.TagRule": {
        "type": "object",
        "description": "Policy rule that is applied to tags.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tag the rule will be applied to."
          },
          "status": {
            "$ref": "#/components/schemas/subscr.Status"
          }
        }
      },
      "subscr.Status": {
        "type": "string",
        "enum": [
          "optional",
          "required",
          "disabled"
        ]
      },
      "subscr.WorkshiftSchedule": {
        "type": "object",
        "properties": {
          "minute": {
            "type": "integer",
            "minimum": 0,
            "maximum": 59
          },
          "hour": {
            "type": "integer",
            "minimum": 0,
            "maximum": 23
          },
          "days": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "mon",
                "tue",
                "wed",
                "thu",
                "fri",
                "sat",
                "sun"
              ]
            },
            "uniqueItems": true
          }
        },
        "nullable": true
      },
      "subscr.Error": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "subscr.BadRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "mgmt.RegisterVm": {
        "type": "object",
        "properties": {
          "managementToolId": {
            "type": "string",
            "description": "Management tool id"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription id"
          },
          "operatingSystem": {
            "type": "string",
            "description": "Operating system",
            "enum": [
              "linux",
              "windows"
            ]
          }
        }
      },
      "mgmt.ManagedVms": {
        "type": "object",
        "properties": {
          "vmId": {
            "type": "string",
            "description": "VM id"
          },
          "managementToolId": {
            "type": "string",
            "description": "Management tool id"
          }
        }
      },
      "mgmt.ManageVm": {
        "type": "object",
        "properties": {
          "vmId": {
            "type": "string",
            "description": "VM id"
          }
        }
      },
      "mgmt.Application": {
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string",
            "description": "Name of application to be installed/uninstalled."
          },
          "vmId": {
            "type": "string",
            "description": "VM id"
          }
        }
      },
      "mgmt.VmDetailsParams": {
        "type": "object",
        "properties": {
          "vmId": {
            "type": "string",
            "description": "VM id"
          }
        }
      },
      "mgmt.VmDetails": {
        "type": "object",
        "properties": {
          "cpuinfo": {
            "type": "object",
            "description": "Cpu info"
          },
          "diskusage": {
            "type": "object",
            "description": "Disk usage info"
          },
          "meminfo": {
            "type": "object",
            "description": "Memory information"
          },
          "netdev": {
            "type": "object",
            "description": "Network information"
          },
          "uptime": {
            "type": "object",
            "description": "Uptime information"
          },
          "loadavg": {
            "type": "object",
            "description": "Avg load"
          }
        }
      },
      "mgmt.BootstrapScript": {
        "type": "object",
        "properties": {
          "vmManagementId": {
            "type": "string",
            "description": "Management uuid"
          }
        }
      },
      "mgmt.BootstrapScriptReturn": {
        "type": "object",
        "properties": {
          "script": {
            "type": "string"
          }
        },
        "description": "Generated bootstrap script"
      },
      "mgmt.Error": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "mgmt.BadRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "mgmt.HttpNotFoundError": {
        "description": "Resource on requested url does not exists",
        "properties": {
          "schema": {
            "$ref": "#/components/schemas/mgmt.Error"
          }
        }
      },
      "mgmt.Subscrption": {
        "type": "object",
        "required": [
          "subscriptionId"
        ],
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "Subscription id"
          }
        }
      },
      "mgmt.ReplaceApp": {
        "type": "object",
        "required": [
          "name",
          "installCommand",
          "uninstallCommand",
          "description"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "installCommand": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "uninstallCommand": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 3000
          }
        }
      },
      "mgmt.App": {
        "type": "object",
        "required": [
          "id",
          "name",
          "installCommand",
          "uninstallCommand",
          "description",
          "toolId",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "installCommand": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "uninstallCommand": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 3000
          },
          "toolId": {
            "type": "string",
            "format": "uuid"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "mgmt.Task": {
        "type": "object",
        "required": [
          "id",
          "toolId",
          "payload"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "toolId": {
            "type": "string",
            "format": "uuid"
          },
          "payload": {
            "type": "object",
            "description": "Management tool-specific information about the task."
          }
        }
      },
      "mgmt.AppInstance": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "subscriptionId",
          "vmId",
          "appName",
          "state",
          "installTaskId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "vmId": {
            "type": "string"
          },
          "appName": {
            "$ref": "#/components/schemas/mgmt.App/properties/name"
          },
          "state": {
            "type": "string",
            "enum": [
              "INITIAL",
              "INSTALLING",
              "INSTALL_SUCCEEDED",
              "INSTALL_FAILED",
              "UNINSTALLING",
              "UNINSTALL_SUCCEEDED",
              "UNINSTALL_FAILED"
            ]
          },
          "installTaskId": {
            "$ref": "#/components/schemas/mgmt.Task/properties/id"
          },
          "uninstallTaskId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/mgmt.Task/properties/id"
              },
              {
                "nullable": true
              }
            ]
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "mgmt.ToolToken": {
        "type": "object",
        "required": [
          "name",
          "toolId",
          "value",
          "createdAt"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 64
          },
          "toolId": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "tag.Error": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object",
        "x-error": true
      },
      "tag.InvalidInput": {
        "$ref": "#/components/schemas/tag.Error"
      },
      "tag.ServiceUnavailable": {
        "$ref": "#/components/schemas/tag.Error"
      },
      "tag.Tag": {
        "properties": {
          "description": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/tag.TagValue"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "name",
          "isRequired",
          "values"
        ],
        "type": "object"
      },
      "tag.TagNotFound": {
        "$ref": "#/components/schemas/tag.Error"
      },
      "tag.TagUpdate": {
        "properties": {
          "description": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/tag.TagValue"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "isRequired",
          "values"
        ],
        "type": "object"
      },
      "tag.TagValue": {
        "properties": {
          "description": {
            "type": "string"
          },
          "value": {
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^[ a-zA-Z0-9_\\\\\\\\/-]+$",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "tag.Tags": {
        "items": {
          "$ref": "#/components/schemas/tag.Tag"
        },
        "type": "array"
      },
      "tag.Unauthorized": {
        "$ref": "#/components/schemas/tag.Error"
      },
      "tag.UnexpectedError": {
        "$ref": "#/components/schemas/tag.Error"
      },
      "notif.Message": {
        "type": "object",
        "description": "Send Email",
        "required": [
          "subject",
          "body",
          "recipients"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "description": "Email subject"
          },
          "body": {
            "type": "string",
            "description": "Email body"
          },
          "recipients": {
            "type": "array",
            "description": "List of recipients email addresses",
            "items": {
              "type": "string"
            }
          },
          "providerId": {
            "type": "string",
            "description": "Optional parameter to specify provider id (managed in config service)"
          }
        }
      },
      "webhook.ChangeStatusError": {
        "$ref": "#/components/schemas/webhook.Error"
      },
      "webhook.ContentType": {
        "type": "string"
      },
      "webhook.ContentTypes": {
        "items": {
          "$ref": "#/components/schemas/webhook.ContentType"
        },
        "type": "array"
      },
      "webhook.Error": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object",
        "x-error": true
      },
      "webhook.EventType": {
        "properties": {
          "description": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "webhook.EventTypes": {
        "items": {
          "$ref": "#/components/schemas/webhook.EventType"
        },
        "type": "array"
      },
      "webhook.InvalidInput": {
        "$ref": "#/components/schemas/webhook.Error"
      },
      "webhook.ServiceUnavailable": {
        "$ref": "#/components/schemas/webhook.Error"
      },
      "webhook.Unauthorized": {
        "$ref": "#/components/schemas/webhook.Error"
      },
      "webhook.UnexpectedError": {
        "$ref": "#/components/schemas/webhook.Error"
      },
      "webhook.Webhook": {
        "properties": {
          "contentType": {
            "minLength": 1,
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "eventTypesIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "url": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "id",
          "url",
          "contentType",
          "enabled"
        ],
        "type": "object"
      },
      "webhook.WebhookNotFound": {
        "$ref": "#/components/schemas/webhook.Error"
      },
      "webhook.Webhooks": {
        "items": {
          "$ref": "#/components/schemas/webhook.Webhook"
        },
        "type": "array"
      },
      "img_whitelist.OSDetails": {
        "type": "object",
        "description": "Operating system details",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "linux",
              "windows",
              "unknown"
            ]
          },
          "distribution": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "img_whitelist.OSDetailsAddUpdate": {
        "type": "object",
        "description": "Operating system details to add/update",
        "required": [
          "type",
          "distribution"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "linux",
              "windows",
              "unknown"
            ]
          },
          "distribution": {
            "type": "string"
          }
        }
      },
      "img_whitelist.ImageAdd": {
        "type": "object",
        "description": "Image data",
        "required": [
          "id",
          "name",
          "minDiskInGb",
          "maxDiskInGb",
          "minRamInMb",
          "os",
          "isPrivate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of an image returned by `/api/v1/*/compute/publicImages` or `/api/v1/*/compute/privateImages` endpoint"
          },
          "name": {
            "type": "string"
          },
          "minDiskInGb": {
            "type": "integer"
          },
          "maxDiskInGb": {
            "type": "integer"
          },
          "minRamInMb": {
            "type": "integer"
          },
          "os": {
            "$ref": "#/components/schemas/img_whitelist.OSDetailsAddUpdate"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "This field describes if images is a private or public one"
          }
        }
      },
      "img_whitelist.ImageUpdate": {
        "type": "object",
        "description": "Operating system",
        "required": [
          "os"
        ],
        "properties": {
          "os": {
            "$ref": "#/components/schemas/img_whitelist.OSDetailsAddUpdate"
          }
        }
      },
      "img_whitelist.Flavor": {
        "type": "object",
        "description": "Flavor",
        "properties": {
          "id": {
            "type": "string",
            "description": "Flavor id"
          },
          "name": {
            "type": "string",
            "description": "Flavor name"
          },
          "diskInGb": {
            "type": "integer",
            "description": "Disk size in GB"
          },
          "ramInMb": {
            "type": "integer",
            "description": "Memory size in MB"
          },
          "vcpus": {
            "type": "integer",
            "description": "Number of virtual CPUs"
          },
          "ephemeralDiskInGb": {
            "type": "integer",
            "description": "VM ephemeral disk size in GB"
          },
          "compatibleVolumeTypeIds": {
            "type": "array",
            "description": "List of compatible volume types",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "img_whitelist.Whitelist": {
        "type": "object",
        "description": "Whitelist object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/img_whitelist.Image"
            }
          },
          "page": {
            "type": "integer",
            "description": "Current page to display"
          },
          "nextPage": {
            "type": "integer",
            "description": "Next page to display. If there are no more items it is null",
            "x-nullabe": true
          }
        }
      },
      "img_whitelist.Image": {
        "type": "object",
        "description": "Image",
        "properties": {
          "id": {
            "type": "string",
            "description": "Image id"
          },
          "name": {
            "type": "string",
            "description": "Image name"
          },
          "minDiskInGb": {
            "type": "integer",
            "description": "Minimal disk size"
          },
          "maxDiskInGb": {
            "type": "integer",
            "description": "Maximum disk size"
          },
          "minRamInMb": {
            "type": "integer",
            "description": "Minimal ram size"
          },
          "os": {
            "$ref": "#/components/schemas/img_whitelist.OSDetails"
          },
          "compatibleFlavors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/img_whitelist.Flavor"
            }
          },
          "isPrivate": {
            "type": "boolean",
            "description": "This field describes if image is private `true` or public `false` one"
          }
        }
      },
      "img_whitelist.HttpError": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "vmware.Action": {
        "enum": [
          "start",
          "poweroff",
          "softReboot",
          "hardReboot"
        ],
        "example": "start",
        "title": "action",
        "type": "string"
      },
      "vmware.AvailabilityZone": {
        "properties": {
          "available": {
            "description": "Determines whether the availability zone is available for use",
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "available",
          "name",
          "id"
        ],
        "title": "AvailabilityZone",
        "type": "object"
      },
      "vmware.CreateSnapshot": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "vmId",
          "name",
          "description"
        ],
        "title": "Craete Snapshot",
        "type": "object"
      },
      "vmware.Day": {
        "enum": [
          "mon",
          "tue",
          "wed",
          "thu",
          "fri",
          "sat",
          "sun"
        ],
        "example": "mon",
        "title": "Day",
        "type": "string"
      },
      "vmware.Flavor": {
        "description": "Flavor",
        "properties": {
          "compatibleVolumeTypeIds": {
            "description": "List of compatible volume type ids",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "diskInGb": {
            "description": "Disk size in GB",
            "type": "integer"
          },
          "id": {
            "description": "Flavor id",
            "type": "string"
          },
          "name": {
            "description": "Flavor name",
            "type": "string"
          },
          "ramInMb": {
            "description": "Memory size in MB",
            "type": "integer"
          },
          "vcpus": {
            "description": "Number of virtual CPUs",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "ramInMb",
          "vcpus"
        ],
        "title": "Flavor",
        "type": "object"
      },
      "vmware.GenerateKeypair": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "GenerateKeypair",
        "type": "object"
      },
      "vmware.IPv4Address": {
        "description": "Ip address",
        "properties": {
          "id": {
            "description": "Id",
            "type": "string"
          },
          "ip": {
            "description": "IP address",
            "format": "ipv4",
            "type": "string"
          },
          "isDirectlyAssociated": {
            "description": "Specifies if IP is directly associated",
            "type": "boolean"
          },
          "isFloating": {
            "description": "Specifies if IP is floating",
            "type": "boolean"
          },
          "isPublic": {
            "description": "Specifies if IP is public",
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "ip"
        ],
        "title": "IPv4Address",
        "type": "object"
      },
      "vmware.Image": {
        "description": "Image",
        "properties": {
          "id": {
            "description": "Image id",
            "type": "string"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "maxDiskInGb": {
            "description": "Maximum disk size in GB",
            "type": "integer"
          },
          "minDiskInGb": {
            "description": "Minimum disk size in GB",
            "type": "integer"
          },
          "minRamInMb": {
            "description": "Minimum memory size in MB",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "minRamInMb",
          "minDiskInGb",
          "maxDiskInGb",
          "isPrivate"
        ],
        "title": "Image",
        "type": "object"
      },
      "vmware.ImportKeypair": {
        "description": "Upload a keypair",
        "properties": {
          "name": {
            "description": "Keypair name",
            "type": "string"
          },
          "publicKey": {
            "description": "Public key to import",
            "type": "string"
          }
        },
        "required": [
          "name",
          "publicKey"
        ],
        "title": "ImportKeypair",
        "type": "object"
      },
      "vmware.Interface": {
        "properties": {
          "attachment": {
            "$ref": "#/components/schemas/vmware.InterfaceAttachment"
          },
          "id": {
            "type": "string"
          },
          "ipv4Addresses": {
            "description": "List of IPs",
            "items": {
              "$ref": "#/components/schemas/vmware.IPv4Address"
            },
            "type": "array",
            "uniqueItems": true
          },
          "macAddress": {
            "description": "Interface mac address",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "networkId": {
            "description": "Network id",
            "type": "string"
          },
          "networkName": {
            "description": "Network name",
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "macAddress",
          "ipv4Addresses"
        ],
        "title": "Interface",
        "type": "object"
      },
      "vmware.InterfaceAttachment": {
        "properties": {
          "subnetId": {
            "description": "subnet id",
            "type": "string"
          },
          "vmId": {
            "description": "vm id",
            "type": "string"
          }
        },
        "required": [
          "vmId",
          "subnetId"
        ],
        "title": "InterfaceAttachment",
        "type": "object"
      },
      "vmware.Keypair": {
        "properties": {
          "fingerprint": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id",
          "fingerprint"
        ],
        "title": "Keypair",
        "type": "object"
      },
      "vmware.Management": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/vmware.Status"
          }
        },
        "required": [
          "status"
        ],
        "title": "Management",
        "type": "object"
      },
      "vmware.Network": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id"
        ],
        "title": "Network",
        "type": "object"
      },
      "vmware.NewKeypair": {
        "properties": {
          "fingerprint": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "privateKey": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id",
          "fingerprint",
          "privateKey"
        ],
        "title": "NewKeypair",
        "type": "object"
      },
      "vmware.NewVolume": {
        "properties": {
          "availabilityZone": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "description": "Volume size in GB",
            "type": "integer"
          },
          "typeId": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "size",
          "typeId",
          "availabilityZone",
          "name",
          "vmId"
        ],
        "title": "NewVolume",
        "type": "object"
      },
      "vmware.OptionalWorkshift": {
        "nullable": true,
        "properties": {
          "start": {
            "$ref": "#/components/schemas/vmware.WorkshiftSchedule"
          },
          "stop": {
            "$ref": "#/components/schemas/vmware.WorkshiftSchedule"
          }
        },
        "title": "OptionalWorkshift",
        "type": "object"
      },
      "vmware.Password": {
        "properties": {
          "encryptedPassword": {
            "type": "string"
          }
        },
        "required": [
          "encryptedPassword"
        ],
        "title": "Password",
        "type": "object"
      },
      "vmware.PowerState": {
        "enum": [
          "running",
          "unknown",
          "noState",
          "pending",
          "paused",
          "stopped",
          "crashed",
          "terminated",
          "terminating",
          "rebooting"
        ],
        "example": "running",
        "title": "PowerState",
        "type": "string"
      },
      "vmware.PublicPrivateImage": {
        "properties": {
          "id": {
            "description": "Image id",
            "type": "string"
          },
          "isPrivate": {
            "description": "Describe if image is private or not",
            "type": "boolean"
          },
          "maxDiskInGb": {
            "description": "Maximum disk size in GB",
            "type": "integer"
          },
          "minDiskInGb": {
            "description": "Minimum disk size in GB",
            "type": "integer"
          },
          "minRamInMb": {
            "description": "Minimum memory size in MB",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "minRamInMb",
          "minDiskInGb",
          "maxDiskInGb",
          "isPrivate"
        ],
        "title": "PublicPrivateImage",
        "type": "object"
      },
      "vmware.Region": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id"
        ],
        "title": "Region",
        "type": "object"
      },
      "vmware.Snapshot": {
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "vmId",
          "name",
          "createdAt",
          "description"
        ],
        "title": "Snapshot",
        "type": "object"
      },
      "vmware.Status": {
        "enum": [
          "available",
          "notAvailable",
          "notEnabled"
        ],
        "example": "available",
        "title": "Status",
        "type": "string"
      },
      "vmware.Subnet": {
        "properties": {
          "cidr": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "Subnet",
        "type": "object"
      },
      "vmware.Subscription": {
        "properties": {
          "authenticationUrl": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "regionId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "password",
          "authenticationUrl",
          "regionId"
        ],
        "title": "Subscription",
        "type": "object"
      },
      "vmware.SubscriptionId": {
        "example": "75e0fc6a-1675-4e90-9d5e-3d004dc3e4ff",
        "type": "string"
      },
      "vmware.Tag": {
        "properties": {
          "name": {
            "description": "Name (key) of the tag",
            "type": "string"
          },
          "value": {
            "description": "Value of the tag",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "title": "Tag",
        "type": "object"
      },
      "vmware.TagUpdate": {
        "description": "Tag update data. It will unset tag from a VM if null value is passed.",
        "properties": {
          "name": {
            "description": "Name (key) of the tag",
            "type": "string"
          },
          "value": {
            "description": "Value of the tag",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "vmware.UpdateVmParams": {
        "properties": {
          "flavorId": {
            "description": "Id of VM flavor",
            "type": "string"
          }
        },
        "title": "UpdateVmParams",
        "type": "object"
      },
      "vmware.UpdateVolumeParams": {
        "properties": {
          "sizeInGb": {
            "description": "New volume size in GB",
            "type": "integer"
          }
        },
        "title": "UpdateVolumeParams",
        "type": "object"
      },
      "vmware.VM": {
        "properties": {
          "allowedPowerActions": {
            "description": "A list of power actions that are allowed in the current VM state",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "availabilityZone": {
            "deprecated": true,
            "type": "string"
          },
          "availabilityZoneId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "flavorId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageId": {
            "type": "string"
          },
          "interfaces": {
            "description": "A list of VM network interface ids",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "isManaged": {
            "deprecated": true,
            "type": "boolean"
          },
          "keypairId": {
            "type": "string"
          },
          "managementToolId": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "powerState": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "statusMessage": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "tags": {
            "description": "A list of VM tags",
            "items": {
              "$ref": "#/components/schemas/vmware.Tag"
            },
            "type": "array",
            "uniqueItems": true
          },
          "volumes": {
            "description": "A list of volume ids attached to the VM",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "workshift": {
            "$ref": "#/components/schemas/vmware.OptionalWorkshift"
          }
        },
        "required": [
          "id",
          "name",
          "powerState",
          "allowedPowerActions",
          "flavorId",
          "volumes",
          "interfaces",
          "isManaged",
          "managementToolId",
          "imageId",
          "keypairId",
          "tags",
          "availabilityZoneId"
        ],
        "title": "VM",
        "type": "object"
      },
      "vmware.VMCreate": {
        "description": "Create VM",
        "properties": {
          "availabilityZone": {
            "description": "Availability zone",
            "type": "string"
          },
          "flavorId": {
            "description": "Flavor id",
            "type": "string"
          },
          "imageId": {
            "description": "Id of an image used for VM creation",
            "type": "string"
          },
          "keypairId": {
            "description": "Keypair id",
            "type": "string"
          },
          "managementEnabled": {
            "deprecated": true,
            "description": "Specifies if management of a VM in EOS is enabled",
            "type": "boolean"
          },
          "managementToolId": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "VM name",
            "type": "string"
          },
          "nics": {
            "description": "List of network ids",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "securityGroups": {
            "description": "List of security group ids. The list is always empty because there are no security groups in VMware.",
            "items": {
              "type": "string"
            },
            "maxItems": 0,
            "type": "array"
          },
          "subnetId": {
            "description": "Subnet id in which VM should be created",
            "type": "string"
          },
          "tags": {
            "description": "Tags (name and value) assigned to this VM",
            "items": {
              "$ref": "#/components/schemas/vmware.Tag"
            },
            "type": "array",
            "uniqueItems": true
          },
          "volumeSize": {
            "description": "Volume size in GB",
            "type": "integer"
          },
          "volumeTypeId": {
            "description": "Volume type id that will be used for OS volume",
            "example": "default",
            "type": "string"
          },
          "workshift": {
            "$ref": "#/components/schemas/vmware.OptionalWorkshift"
          }
        },
        "required": [
          "name",
          "imageId",
          "flavorId",
          "keypairId",
          "volumeSize",
          "volumeTypeId",
          "securityGroups",
          "availabilityZone",
          "tags"
        ],
        "title": "VMCreate",
        "type": "object"
      },
      "vmware.VMId": {
        "example": "pc000xvcsam24.pc000x.fmpcs.local~vm-1316",
        "type": "string"
      },
      "vmware.VMdetails": {
        "description": "List of VM details",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "title": "VM details",
        "type": "object"
      },
      "vmware.VmSimple": {
        "properties": {
          "availabilityZone": {
            "deprecated": true,
            "type": "string"
          },
          "availabilityZoneId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "flavorId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageId": {
            "type": "string"
          },
          "isManaged": {
            "deprecated": true,
            "type": "boolean"
          },
          "managementToolId": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "powerState": {
            "$ref": "#/components/schemas/vmware.PowerState"
          },
          "tags": {
            "description": "A list of VM tags",
            "items": {
              "$ref": "#/components/schemas/vmware.Tag"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "id",
          "name",
          "powerState",
          "flavorId",
          "imageId",
          "isManaged",
          "managementToolId",
          "availabilityZoneId",
          "tags"
        ],
        "title": "VmSimple",
        "type": "object"
      },
      "vmware.Volume": {
        "example": {
          "attachment": {
            "device": "0:1",
            "vmId": "pc000xvcsam24.pc000x.fmpcs.local~vm-1370"
          },
          "id": "pc000xvcsam24.pc000x.fmpcs.local~vm-1370~0:1",
          "isOsDisk": false,
          "name": "Volume 1",
          "sizeInGb": 120,
          "status": "inUse",
          "tags": [],
          "typeId": "009ee6e0-a5e4-43eb-8a3d-7e0de6d776b6"
        },
        "properties": {
          "attachment": {
            "nullable": true,
            "properties": {
              "device": {
                "type": "string"
              },
              "vmId": {
                "type": "string"
              }
            },
            "required": [
              "device",
              "vmId"
            ],
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "isOsDisk": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string"
          },
          "sizeInGb": {
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/vmware.VolumeStatus"
          },
          "tags": {
            "description": "A list of tags",
            "items": {
              "$ref": "#/components/schemas/vmware.Tag"
            },
            "type": "array",
            "uniqueItems": true
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "sizeInGb",
          "status",
          "typeId",
          "isOsDisk",
          "attachment"
        ],
        "type": "object"
      },
      "vmware.VolumeId": {
        "example": "pc000xvcsam24.pc000x.fmpcs.local~vm-1570~0:5",
        "type": "string"
      },
      "vmware.VolumeStatus": {
        "enum": [
          "available",
          "inUse",
          "error",
          "unknown"
        ],
        "type": "string"
      },
      "vmware.VolumeType": {
        "properties": {
          "id": {
            "description": "Id of volume type",
            "type": "string"
          },
          "isOsCompatible": {
            "description": "States if volume can be used as OS volume",
            "type": "boolean"
          },
          "maxVolumeSizeInGb": {
            "description": "Highest volume size that can be created with given volume type",
            "type": "integer"
          },
          "minVolumeSizeInGb": {
            "description": "Minimal volume size that can be created with given volume type",
            "type": "integer"
          },
          "name": {
            "description": "Human readable name of the volume type",
            "type": "string"
          }
        },
        "title": "VolumeType",
        "type": "object"
      },
      "vmware.Workshift": {
        "properties": {
          "start": {
            "$ref": "#/components/schemas/vmware.WorkshiftSchedule"
          },
          "stop": {
            "$ref": "#/components/schemas/vmware.WorkshiftSchedule"
          }
        },
        "title": "Workshift",
        "type": "object"
      },
      "vmware.WorkshiftSchedule": {
        "properties": {
          "days": {
            "description": "A list of week days on which the schedule is planned to be executed",
            "items": {
              "$ref": "#/components/schemas/vmware.Day"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "hour": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer"
          },
          "minute": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer"
          }
        },
        "title": "WorkshiftSchedule",
        "type": "object"
      },
      "vmware.vmware_service.resources.status.getResponse": {
        "properties": {
          "status": {
            "example": "health-check-ok",
            "type": "string"
          }
        },
        "title": "vmware_service.resources.status.getResponse",
        "type": "object"
      },
      "azure.VMId": {
        "type": "string",
        "format": "vmId",
        "example": "MY-RESOURCE-GROUP~my-azure-vm"
      },
      "azure.ResourceGroupId": {
        "type": "string",
        "example": "MY-RESOURCE_GROUP"
      },
      "azure.InterfaceId": {
        "type": "string",
        "format": "interfaceId",
        "example": "MY-RESOURCE-GROUP~my-azure-interface"
      },
      "azure.VolumeId": {
        "type": "string",
        "format": "volumeId",
        "example": "MY-RESOURCE-GROUP~my-azure-volume"
      },
      "azure.SubscriptionId": {
        "type": "string",
        "format": "uuid",
        "example": "75e0fc6a-1675-4e90-9d5e-3d004dc3e4ff"
      },
      "azure.AvailabilityZoneId": {
        "type": "string",
        "example": "default",
        "default": "default"
      },
      "azure.AvailabilitySetId": {
        "type": "string",
        "format": "availabilitySetId",
        "example": "MY-RESOURCE-GROUP~my-azure-availability-set"
      },
      "azure.RegionId": {
        "type": "string",
        "example": "eastasia",
        "readOnly": true,
        "description": "ID of the region"
      },
      "azure.ImageId": {
        "type": "string",
        "example": "my_pubslisher:my_offer:my_sku",
        "minLength": 1
      },
      "azure.FlavorId": {
        "type": "string",
        "example": "Standard_A1"
      },
      "azure.VolumeTypeId": {
        "type": "string",
        "example": "Premium_LRS",
        "enum": [
          "Premium_LRS",
          "Standard_LRS",
          "StandardSSD_LRS"
        ]
      },
      "azure.NetworkId": {
        "type": "string",
        "format": "networkId",
        "example": "MY-RESOURCE-GROUP~my-azure-network"
      },
      "azure.SubnetId": {
        "type": "string",
        "format": "subnetId",
        "example": "MY-RESOURCE-GROUP~my-azure-network~my-azure-subnet"
      },
      "azure.KeypairId": {
        "type": "string",
        "example": "private-key",
        "minLength": 1,
        "maxLength": 60,
        "pattern": "^[a-zA-Z0-9_-]+$"
      },
      "azure.KeypairName": {
        "type": "string",
        "example": "private-key",
        "minLength": 1,
        "maxLength": 60,
        "pattern": "^[a-zA-Z0-9_-]+$"
      },
      "azure.Ipv4AddressId": {
        "type": "string",
        "format": "ipv4AddressId",
        "example": "MY-RESOURCE-GROUP~my-azure-ipv4-address-id"
      },
      "azure.SecurityGroupId": {
        "type": "string",
        "format": "securityGroupId",
        "example": "Default-Networking~FCSMOMSTest2-nsg"
      },
      "azure.ManagementToolId": {
        "type": "string",
        "format": "uuid",
        "example": "38d07fe2-eae2-4fcf-af67-90180a2b636e"
      },
      "azure.SnapshotId": {
        "type": "string",
        "format": "snapshotId",
        "example": "MY-RESOURCE-GROUP~my-azure-snapshot"
      },
      "azure.Snapshot": {
        "type": "object",
        "required": [
          "id",
          "vmId",
          "name",
          "createdAt",
          "description"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.SnapshotId"
          },
          "vmId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "datetime",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "azure.CreateSnapshot": {
        "type": "object",
        "required": [
          "vmId",
          "name",
          "description"
        ],
        "properties": {
          "vmId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "azure.Region": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.RegionId"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "East Asia"
          }
        },
        "example": {
          "id": "eastasia",
          "name": "East Asia"
        }
      },
      "azure.PublicPrivateImage": {
        "type": "object",
        "description": "An image that can be used to provision virtual machine",
        "required": [
          "id",
          "name",
          "minDiskInGb",
          "maxDiskInGb",
          "minRamInMb",
          "isPrivate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.ImageId"
          },
          "name": {
            "type": "string",
            "example": "my_publisher - my_offer - my_sku",
            "readOnly": true,
            "minLength": 1
          },
          "minDiskInGb": {
            "type": "integer",
            "example": 128,
            "readOnly": true,
            "minimum": 1
          },
          "maxDiskInGb": {
            "type": "integer",
            "example": 128,
            "readOnly": true,
            "minimum": 1
          },
          "minRamInMb": {
            "type": "integer",
            "example": 1024,
            "readOnly": true,
            "minimum": 1
          },
          "isPrivate": {
            "type": "boolean",
            "example": false,
            "readOnly": true
          }
        }
      },
      "azure.AvailabilityZone": {
        "type": "object",
        "required": [
          "id",
          "name",
          "isAvailable"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.AvailabilityZoneId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "isAvailable": {
            "type": "boolean",
            "readOnly": true
          },
          "available": {
            "type": "boolean",
            "deprecated": true,
            "readOnly": true
          }
        },
        "example": {
          "id": "default",
          "name": "Default",
          "isAvailable": true,
          "available": true
        }
      },
      "azure.AvailabilitySet": {
        "type": "object",
        "required": [
          "id",
          "name",
          "resourceGroupId"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.AvailabilitySetId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "resourceGroupId": {
            "$ref": "#/components/schemas/azure.ResourceGroupId",
            "readOnly": true
          }
        }
      },
      "azure.Flavor": {
        "type": "object",
        "required": [
          "id",
          "name",
          "ramInMb",
          "vcpus",
          "diskInGb",
          "compatibleVolumeTypeIds"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.FlavorId"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "Standard A1"
          },
          "ramInMb": {
            "type": "integer",
            "readOnly": true,
            "description": "Amount of memory supported by virtual machine with this flavor",
            "example": 100
          },
          "vcpus": {
            "type": "integer",
            "readOnly": true,
            "description": "Amount of VCPUs supported by virtual machine with this flavor",
            "example": 1
          },
          "diskInGb": {
            "type": "integer",
            "readOnly": true,
            "description": "Highest OS volume size allowed for virtual machines with this flavor",
            "example": 10
          },
          "ephemeralDiskInGb": {
            "type": "integer",
            "readOnly": true,
            "description": "Highest data volume size allowed for virtual machines with this flavor",
            "example": 10
          },
          "compatibleVolumeTypeIds": {
            "type": "array",
            "minItems": 1,
            "readOnly": true,
            "description": "List of volume types that can be attached to this virtual machine as data volumes",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/azure.VolumeTypeId"
                },
                {
                  "uniqueItems": true
                }
              ]
            }
          }
        }
      },
      "azure.VMSimple": {
        "type": "object",
        "required": [
          "id",
          "name",
          "isManaged",
          "managementToolId",
          "flavorId",
          "imageId",
          "powerState",
          "availabilityZoneId",
          "availabilityZone",
          "tags"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.VMId"
          },
          "name": {
            "type": "string"
          },
          "isManaged": {
            "type": "boolean",
            "deprecated": true
          },
          "managementToolId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/azure.ManagementToolId"
              },
              {
                "nullable": true
              }
            ]
          },
          "flavorId": {
            "$ref": "#/components/schemas/azure.FlavorId"
          },
          "imageId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/azure.ImageId"
              },
              {
                "nullable": true
              }
            ]
          },
          "powerState": {
            "type": "string",
            "enum": [
              "unknown",
              "running",
              "stopped",
              "pending"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "datetime",
            "readOnly": true,
            "nullable": true
          },
          "availabilityZoneId": {
            "$ref": "#/components/schemas/azure.AvailabilityZoneId"
          },
          "availabilityZone": {
            "description": "Deprecated after 3 months. Please use `availabilityZoneId`",
            "allOf": [
              {
                "$ref": "#/components/schemas/azure.AvailabilityZoneId"
              },
              {
                "deprecated": true
              }
            ]
          },
          "availabilitySetId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/azure.AvailabilitySetId"
              },
              {
                "nullable": true
              }
            ]
          },
          "tags": {
            "type": "array",
            "minItems": 0,
            "maxItems": 15,
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/azure.Tag"
            }
          }
        },
        "example": {
          "id": "MY-RESOURCE-GROUP~my-azure-vm",
          "name": "my-azure-vm",
          "isManaged": false,
          "managementToolId": null,
          "flavorId": "Standard_A1",
          "imageId": "Canonical.UbuntuServer1404LTS-ARM.1.0.54",
          "powerState": "stopped",
          "availabilitySetId": "MY-RESOURCE-GROUP~my-super-set",
          "tags": []
        }
      },
      "azure.VMExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/azure.VMSimple"
          },
          {
            "type": "object",
            "required": [
              "interfaceIds",
              "volumeIds",
              "allowedPowerActions",
              "status"
            ],
            "properties": {
              "interfaceIds": {
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/azure.InterfaceId"
                }
              },
              "interfaces": {
                "type": "array",
                "description": "Deprecated after 3 months. Please use `interfaceIds`",
                "deprecated": true,
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/azure.InterfaceId"
                }
              },
              "volumeIds": {
                "type": "array",
                "uniqueItems": true,
                "minItems": 1,
                "description": "List will contain at least one item which will be an ID\nof the OS volume virtual machine boots from\n",
                "items": {
                  "$ref": "#/components/schemas/azure.VolumeId"
                }
              },
              "volumes": {
                "type": "array",
                "description": "Deprecated after 3 months. Please use `volumeIds`",
                "deprecated": true,
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/azure.VolumeId"
                }
              },
              "allowedPowerActions": {
                "type": "array",
                "readOnly": true,
                "minItems": 0,
                "maxItems": 3,
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/azure.VMPowerAction"
                }
              },
              "status": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "ok",
                  "error",
                  "pending"
                ]
              },
              "statusMessage": {
                "type": "string",
                "readOnly": true,
                "nullable": true
              },
              "workshift": {
                "$ref": "#/components/schemas/azure.OptionalWorkshift"
              }
            },
            "example": {
              "id": "MY-RESOURCE-GROUP~my-azure-vm",
              "name": "my-azure-vm",
              "isManaged": false,
              "flavorId": "Standard_A1",
              "imageId": "Canonical.UbuntuServer1404LTS-ARM.1.0.54",
              "powerState": "running",
              "interfaceIds": [
                "nic-my-auzre-vm-DefaultNetworkingvn404"
              ],
              "volumeIds": [
                "PROVISIONING-TEST~my-azure-vm_OsDisk_1_8d07c99dc9284284b9ead23870579161"
              ],
              "allowedPowerActions": [
                "poweroff",
                "softReboot",
                "hardReboot"
              ],
              "status": "ok",
              "workshift": null
            }
          }
        ]
      },
      "azure.VMCreateData": {
        "type": "object",
        "required": [
          "name",
          "imageId",
          "flavorId",
          "keypairId",
          "volumeSize",
          "volumeTypeId",
          "tags",
          "resourceGroupId"
        ],
        "description": "Provisioning properties for virtual machine. Note the deprecated fields. Look at the descriptions of each deprecated field to see their valid counterparts. Having both, deprecated and valid, fields present in the request is treated as an error with the exception for \"securityGroupIds\" aliasing \"securityGroups\" and \"availabilityZoneId\" aliasing \"availabilityZone\".\nConstraints:\n- \"flavorId\" - flavor identifier must point to a valid flavor that is\n  compatible with selected image (via \"imageId\") and selected\n  volumeType (via \"volumeTypeId\"). Also, if you are trying to provision a managed VM\n  with Windows operating system flavor should have at least 3.5GB of RAM.\n- \"imageId\" - image identifier defined in whitelist for Azure subscription.\n  Image ID must point to a valid image therefore it must exist,\n  have a known operating system and have a non empty list of\n  compatible flavors.\n- \"keypairId\" - keypair identifier. Works differently, based on on OS of the image\n  (via \"imageId\"). For Windows machines it is used to encrypt the initial password to log in to the machine.\n  For linux machines it is used as a SSH key that is uploaded to the machine\n- \"volumeTypeId\" - A type of the OS volume. It has point to valid volume type\n  therefore it must exist and have a list of known compatible flavors\n- \"volumeSize\" - size of the OS volume. Note that the size cannot be larger than\n  1000GB and smaller than minimum disk size defined by an image (via \"imageId\")\n- \"tags\"- tags (name and value) to be assigned to this VM. This list can be empty if\n  you opt out from tagging the virtual machine. However, if there are\n  required tags defined in the system, all of those have to be included here. This list cannot\n  contain duplicated tags (via \"name\") and all \"name\"s as well as each \"value\" assigned to it must be known\n  to the system. Provided any of those prerequisites is not met, an error is returned.\n- \"workshift\"- This can be set or not. Note that it must be set and\n  match the workshift defined in subscription if the latter\n  enforces it as well it must not be set if the subscription disallows workshifts. If you are unsure as to\n  what is permitted here, you may consult a workshift policy defined for your subscription\n\nImplementation details:\n- access via password is not set for Linux machines, only SSH-ing into\n  the machine is enabled\n- if VM is to be managed, a special agent is installed on the machine to\n  enable any operations, such as application installation\n",
        "properties": {
          "name": {
            "type": "string",
            "example": "my-azure-vm-1",
            "pattern": "^(?!-)[A-Za-z0-9-_]{1,63}(?<!-)$"
          },
          "resourceGroupId": {
            "$ref": "#/components/schemas/azure.ResourceGroupId"
          },
          "flavorId": {
            "$ref": "#/components/schemas/azure.FlavorId"
          },
          "imageId": {
            "$ref": "#/components/schemas/azure.ImageId"
          },
          "keypairId": {
            "$ref": "#/components/schemas/azure.KeypairId"
          },
          "volumeSize": {
            "type": "integer",
            "example": 30,
            "maximum": 1000
          },
          "volumeTypeId": {
            "$ref": "#/components/schemas/azure.VolumeTypeId"
          },
          "tags": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 0,
            "maxItems": 15,
            "items": {
              "$ref": "#/components/schemas/azure.Tag"
            }
          },
          "workshift": {
            "$ref": "#/components/schemas/azure.OptionalWorkshift"
          },
          "securityGroups": {
            "type": "array",
            "deprecated": true,
            "description": "\"securityGroups\" is deprecated in favor of \"securityGroupIds\" and will be removed in 3 months.",
            "uniqueItems": true,
            "minItems": 0,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/azure.SecurityGroupId"
            }
          },
          "securityGroupIds": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 0,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/azure.SecurityGroupId"
            }
          },
          "avalabilityZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/azure.AvailabilityZoneId"
              },
              {
                "deprecated": true,
                "description": "\"availabilityZone\" is deprecated in favor of \"availabilityZoneId\" and will be removed in 3 months."
              }
            ]
          },
          "availabilityZoneId": {
            "$ref": "#/components/schemas/azure.AvailabilityZoneId"
          },
          "availabilitySetId": {
            "$ref": "#/components/schemas/azure.AvailabilitySetId"
          },
          "nics": {
            "type": "array",
            "deprecated": true,
            "description": "\"nics\" is deprecated in favor of \"subnetId\" and will be removed in 3 months.",
            "uniqueItems": true,
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/azure.NetworkId"
            }
          },
          "subnetId": {
            "$ref": "#/components/schemas/azure.SubnetId"
          },
          "managementEnabled": {
            "type": "boolean",
            "deprecated": true,
            "example": true,
            "description": "\"managementEnabled\" is deprecated in favor of \"managementToolId\" and will be removed in 3 months."
          },
          "managementToolId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/azure.ManagementToolId"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "azure.VMPowerAction": {
        "type": "string",
        "uniqueItems": true,
        "enum": [
          "start",
          "poweroff",
          "softReboot",
          "hardReboot"
        ]
      },
      "azure.VolumeAttachment": {
        "type": "object",
        "nullable": true,
        "required": [
          "device",
          "vmId"
        ],
        "properties": {
          "device": {
            "type": "string",
            "example": "/lun/0",
            "description": "lun/{number} path is for data volume and /os path is for OS volumes\n"
          },
          "vmId": {
            "$ref": "#/components/schemas/azure.VMId"
          }
        }
      },
      "azure.Volume": {
        "type": "object",
        "required": [
          "id",
          "name",
          "createdAt",
          "sizeInGb",
          "status",
          "typeId",
          "isOsDisk",
          "tags",
          "attachment",
          "availabilityZoneId"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.VolumeId"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 300,
            "pattern": "^[?\\.|a-zA-Z0-9_-]+$"
          },
          "createdAt": {
            "type": "string",
            "format": "datetime",
            "readOnly": true
          },
          "sizeInGb": {
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/azure.VolumeStatus"
          },
          "typeId": {
            "$ref": "#/components/schemas/azure.VolumeTypeId"
          },
          "isOsDisk": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 0,
            "maxItems": 15,
            "description": "Tags (name and value) assigned to this Volume",
            "items": {
              "$ref": "#/components/schemas/azure.Tag"
            }
          },
          "availabilityZoneId": {
            "$ref": "#/components/schemas/azure.AvailabilityZoneId"
          },
          "attachment": {
            "$ref": "#/components/schemas/azure.VolumeAttachment"
          }
        },
        "example": {
          "id": "PROVISIONING-TEST",
          "createdAt": "test-test",
          "sizeInGb": 120,
          "status": "available",
          "name": "name-test",
          "availabilityZone": "test-test",
          "typeId": "test-test",
          "isOsDisk": false
        }
      },
      "azure.Tag": {
        "type": "object",
        "description": "Tag that is assigned to the virtual machine",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier (name) of the tag"
          },
          "value": {
            "type": "string",
            "description": "Assigned value of the tag"
          }
        }
      },
      "azure.TagUpdate": {
        "type": "object",
        "description": "Tag update data. It will unset tag from a VM if null value is passed.",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier (name) of the tag"
          },
          "value": {
            "type": "string",
            "description": "Assigned value of the tag",
            "nullable": true
          }
        }
      },
      "azure.Workshift": {
        "type": "object",
        "description": "Workshift for this VM composed out of start (when to start) and stop (when to stop) virtual machine\n",
        "required": [
          "start",
          "stop"
        ],
        "properties": {
          "start": {
            "$ref": "#/components/schemas/azure.WorkshiftSchedule"
          },
          "stop": {
            "$ref": "#/components/schemas/azure.WorkshiftSchedule"
          }
        }
      },
      "azure.OptionalWorkshift": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/azure.Workshift"
          },
          {
            "type": "object",
            "nullable": true
          }
        ]
      },
      "azure.WorkshiftSchedule": {
        "type": "object",
        "description": "Describes when power state of a VM should be affected. It is composed out of hour:minute and list of days when aforementioned power state change should happen\n",
        "required": [
          "hour",
          "minute",
          "days"
        ],
        "properties": {
          "minute": {
            "type": "integer",
            "minimum": 0,
            "maximum": 59
          },
          "hour": {
            "type": "integer",
            "minimum": 0,
            "maximum": 23
          },
          "days": {
            "type": "array",
            "description": "Set of days when workshift should be applied. It has to contain at least one day and cannot contain duplicates.\n",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "mon",
                "tue",
                "wed",
                "thu",
                "fri",
                "sat",
                "sun"
              ]
            },
            "uniqueItems": true,
            "example": [
              "mon",
              "sun"
            ]
          }
        }
      },
      "azure.Keypair": {
        "type": "object",
        "required": [
          "id",
          "name",
          "fingerprint",
          "publicKey"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.KeypairId"
          },
          "name": {
            "$ref": "#/components/schemas/azure.KeypairName"
          },
          "fingerprint": {
            "type": "string",
            "description": "Keypair fingerprint, synonymous to the SSH fingerprint.\n",
            "readOnly": true
          },
          "publicKey": {
            "type": "string",
            "description": "Public part of the keypair, synonymous to the SSH public key.\n",
            "readOnly": true
          }
        }
      },
      "azure.KeypairGenerate": {
        "type": "object",
        "description": "Requests body to generate a keypair. The public and private keys will be generated for the user.\n",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/azure.KeypairName"
          }
        },
        "example": {
          "name": "my-generated-keypair"
        }
      },
      "azure.KeypairImport": {
        "type": "object",
        "description": "Requests body to import a keypair.\n",
        "required": [
          "name",
          "publicKey"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/azure.KeypairName"
          },
          "publicKey": {
            "type": "string",
            "description": "Keypair public key synonymous to the SSH public key\n"
          }
        },
        "example": {
          "name": "my-imported-keypair",
          "publicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDQzRJEGYzFGdzxWDUxYLc mmwUHuWCRrLkXYgj0DljCxHstHr/VKssSMuF02FqwPb5/9Phrl5cajpWiB7baC2Gkzw3ZyQdnanIFqp 9SqIbCPjd1LsU57FF/t/C99snD6gZTYXoufMHGOAl1Vt6+PNXfFekJXgTnRgDlxggnWMoLGiUJpbkyq MnBcrPVnVLYThV1WuOeXmyYhLj4EK2Qvs33OsCT5CBwYie3AfkK9+Ti/zga7LAWUBOOMBf6+bqJQWRT uQ4ayfWrFOhsosiA2C1F+8M0LVX+MiZtho/Kev352NJbGt8+wLSSLxrb+aqNZnmieClweS1w46f9hIY lS4gFOzAM9iS9XcNyChsaENTvktHpW1jSCErnEW1xbvg+7TMCJ0RYOtxiRW9GZQffDwUXU1CJCNIfQ9 1w/RqVsvnYzLOu4OunKR5HKPuWIF/WFFp1kRbetM1MuvV2YrXFYI7+OgPOL3VPlzPDYdXDhsPFVeObx E1T2W3PB/p7OAcFYJRVOoHrY74M+c3lvWicdL7QfZRNnPVnWhJiMFxCMK+G43xcsKVgJH05HW+PLcGJ D6SdgDrY2eE6rYATVpo0az52s+jTqNCyqCX2G9T01wAyK50/a5Ivo7s804cQT0yQuB6dGstx1cDwgJh ayy8V3pruJn19I7fE5/KmrwInGv8nFw==\n"
        }
      },
      "azure.GeneratedKeypair": {
        "allOf": [
          {
            "$ref": "#/components/schemas/azure.Keypair"
          },
          {
            "type": "object",
            "description": "Remember that private keypair must be downloaded/saved on the disk in order to use it when accessing the virtual machine or decoding its password. It will not be possible to retrieve later.\n",
            "required": [
              "privateKey"
            ],
            "properties": {
              "privateKey": {
                "type": "string",
                "description": "Private part of the keypair, synonymous to the SSH private key.",
                "readOnly": true
              }
            }
          }
        ]
      },
      "azure.IsOsDisk": {
        "type": "boolean",
        "example": true
      },
      "azure.IsOsCompatible": {
        "type": "boolean",
        "example": true
      },
      "azure.VolumeStatus": {
        "type": "string",
        "enum": [
          "available",
          "inUse",
          "error",
          "unknown"
        ]
      },
      "azure.VolumeType": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.VolumeTypeId"
          },
          "name": {
            "type": "string"
          },
          "minVolumeSizeInGb": {
            "type": "integer"
          },
          "maxVolumeSizeInGb": {
            "type": "integer"
          },
          "isOsCompatible": {
            "$ref": "#/components/schemas/azure.IsOsCompatible"
          }
        },
        "example": {
          "id": "PROVISIONING-TEST~volume-name",
          "name": "volume-name",
          "minVolumeSizeInGb": 1,
          "maxVolumeSizeInGb": 1024,
          "isOsCompatible": false
        }
      },
      "azure.CreateVolume": {
        "type": "object",
        "required": [
          "name",
          "size",
          "typeId",
          "resourceGroupId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 60,
            "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9_.-]*\\w$"
          },
          "size": {
            "type": "integer"
          },
          "typeId": {
            "$ref": "#/components/schemas/azure.VolumeTypeId"
          },
          "resourceGroupId": {
            "$ref": "#/components/schemas/azure.ResourceGroupId"
          },
          "availabilityZoneId": {
            "$ref": "#/components/schemas/azure.AvailabilityZoneId"
          },
          "availabilityZone": {
            "description": "Deprecated after 3 months. Please use `availabilityZoneId`",
            "allOf": [
              {
                "$ref": "#/components/schemas/azure.AvailabilityZoneId"
              },
              {
                "deprecated": true
              }
            ]
          },
          "vmId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/azure.VMId"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "azure.PatchVolume": {
        "type": "object",
        "required": [
          "sizeInGb"
        ],
        "properties": {
          "sizeInGb": {
            "type": "integer"
          }
        }
      },
      "azure.Network": {
        "type": "object",
        "required": [
          "id",
          "name",
          "addressPrefix"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.NetworkId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "addressPrefix": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "azure.Subnet": {
        "type": "object",
        "required": [
          "id",
          "name",
          "cidr"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.SubnetId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "cidr": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "azure.IPv4Address": {
        "type": "object",
        "required": [
          "id",
          "name",
          "allowedActions",
          "isDirectlyAssociated",
          "isFloating",
          "isPublic"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.Ipv4AddressId"
          },
          "ip": {
            "type": "string",
            "format": "ip",
            "readOnly": true,
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "allowedActions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isDirectlyAssociated": {
            "type": "boolean",
            "readOnly": true
          },
          "isFloating": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "dnsName": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          }
        }
      },
      "azure.InterfaceAttachment": {
        "type": "object",
        "required": [
          "vmId",
          "subnetId"
        ],
        "properties": {
          "vmId": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/azure.VMId"
              },
              {
                "nullable": true
              }
            ]
          },
          "subnetId": {
            "$ref": "#/components/schemas/azure.SubnetId"
          }
        }
      },
      "azure.Interface": {
        "type": "object",
        "required": [
          "id",
          "name",
          "primary",
          "networkId",
          "networkName",
          "ipv4Addresses",
          "attachment"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.InterfaceId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "primary": {
            "type": "boolean",
            "readOnly": true
          },
          "macAddress": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "networkId": {
            "$ref": "#/components/schemas/azure.NetworkId"
          },
          "networkName": {
            "type": "string",
            "readOnly": true
          },
          "ipv4Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/azure.IPv4Address"
            }
          },
          "attachment": {
            "$ref": "#/components/schemas/azure.InterfaceAttachment"
          }
        }
      },
      "azure.SecurityGroup": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/azure.SecurityGroupId"
          },
          "name": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "azure.VmFloatingIp": {
        "type": "object",
        "required": [
          "id",
          "floatingIpAddress",
          "interfaceId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "floatingIpAddress": {
            "type": "string",
            "readOnly": true,
            "example": "135.23.22.134",
            "format": "ip"
          },
          "interfaceId": {
            "$ref": "#/components/schemas/azure.InterfaceId"
          }
        }
      },
      "azure.ManagementStatus": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "available",
              "notAvailable",
              "notEnabled"
            ]
          }
        }
      },
      "azure.ResourceGroup": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "my-resource-group"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "my-resource-group"
          }
        }
      },
      "azure.CreateResourceGroup": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[?\\.|a-zA-Z0-9_-]+$"
          }
        }
      },
      "azure.VmDetails": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "readOnly": true,
            "example": "Availability Zone"
          },
          "value": {
            "type": "string",
            "readOnly": true,
            "example": "default"
          }
        }
      },
      "azure.EncryptedPassword": {
        "type": "object",
        "required": [
          "encryptedPassword"
        ],
        "properties": {
          "encryptedPassword": {
            "type": "string",
            "readOnly": true,
            "example": "my-password"
          }
        }
      },
      "azure.VMPatch": {
        "type": "object",
        "properties": {
          "flavorId": {
            "$ref": "#/components/schemas/azure.FlavorId"
          }
        }
      },
      "azure.Error": {
        "type": "object",
        "description": "An error response",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "azure.Subscription": {
        "type": "object",
        "required": [
          "regionId",
          "spUsername",
          "spPassword",
          "platformSubscriptionId",
          "tenantId"
        ],
        "properties": {
          "regionId": {
            "type": "string",
            "example": "eastasia"
          },
          "spUsername": {
            "type": "string",
            "example": "sample-user"
          },
          "spPassword": {
            "type": "string",
            "example": "my-password"
          },
          "platformSubscriptionId": {
            "type": "string",
            "example": "aderdcdd-f85e-432-b1ea-yeh0sdh9be"
          },
          "tenantId": {
            "type": "string",
            "example": "aderdcdd-f85e-432-b1ea-yeh0sdh9be"
          }
        }
      },
      "aws.AvailabilityZone": {
        "description": "Availability zone",
        "properties": {
          "available": {
            "deprecated": true,
            "description": "Indicates whether the zone state is available",
            "type": "boolean"
          },
          "id": {
            "description": "Availability zone id",
            "type": "string"
          },
          "isAvailable": {
            "description": "Indicates whether the zone stat is available",
            "type": "boolean"
          },
          "name": {
            "description": "Availability zone name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "aws.CreateKeypair": {
        "description": "New keypair creation data",
        "properties": {
          "name": {
            "description": "Keypair name. 1-255 ASCII characters. Must be unique within AWS account.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "aws.CreateSnapshotParams": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "vmId",
          "name",
          "description"
        ],
        "type": "object"
      },
      "aws.CreateVolumeParams": {
        "properties": {
          "availabilityZone": {
            "deprecated": true,
            "type": "string"
          },
          "availabilityZoneId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "description": "Volume size in GB",
            "type": "integer"
          },
          "typeId": {
            "$ref": "#/components/schemas/aws.VolumeTypeId"
          },
          "vmId": {
            "description": "Vm id to which newly created volume will be attached",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "size",
          "typeId",
          "name"
        ],
        "type": "object"
      },
      "aws.EncryptedPassword": {
        "properties": {
          "encryptedPassword": {
            "type": "string"
          }
        },
        "required": [
          "encryptedPassword"
        ],
        "type": "object"
      },
      "aws.Error": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "aws.Flavor": {
        "description": "Single flavor",
        "properties": {
          "compatibleVolumeTypeIds": {
            "description": "List of compatible volume type ids",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "diskInGb": {
            "description": "Disk size in GB",
            "type": "integer"
          },
          "ephemeralDiskInGb": {
            "deprecated": true,
            "description": "VM ephemeral disk size in GB",
            "type": "integer"
          },
          "id": {
            "description": "Flavor id",
            "type": "string"
          },
          "name": {
            "description": "Flavor name",
            "type": "string"
          },
          "ramInMb": {
            "description": "Memory size in MB",
            "type": "integer"
          },
          "vcpus": {
            "description": "Number of virtual CPUs",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "ramInMb",
          "diskInGb",
          "vcpus",
          "compatibleVolumeTypeIds"
        ],
        "type": "object"
      },
      "aws.IPv4Address": {
        "properties": {
          "allowedActions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dnsName": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "ip": {
            "format": "ip",
            "type": "string"
          },
          "isDirectlyAssociated": {
            "type": "boolean"
          },
          "isFloating": {
            "type": "boolean"
          },
          "isPublic": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "ip",
          "name",
          "allowedActions",
          "isDirectlyAssociated",
          "isFloating",
          "isPublic"
        ],
        "type": "object"
      },
      "aws.Image": {
        "description": "Single public/private image",
        "properties": {
          "id": {
            "description": "Image id",
            "type": "string"
          },
          "isPrivate": {
            "description": "Describe if image is private or not",
            "type": "boolean"
          },
          "maxDiskInGb": {
            "description": "Maximum disk size in GB",
            "type": "integer"
          },
          "minDiskInGb": {
            "description": "Minimum disk size in GB",
            "type": "integer"
          },
          "minRamInMb": {
            "description": "Minimum memory size in MB",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "minRamInMb",
          "minDiskInGb",
          "maxDiskInGb",
          "isPrivate"
        ],
        "type": "object"
      },
      "aws.ImportKeypair": {
        "description": "New keypair import data",
        "properties": {
          "name": {
            "description": "Keypair name. 1-255 ASCII characters. Must be unique within AWS account.",
            "type": "string"
          },
          "publicKey": {
            "description": "Public key to import",
            "type": "string"
          }
        },
        "required": [
          "name",
          "publicKey"
        ],
        "type": "object"
      },
      "aws.Interface": {
        "properties": {
          "attachment": {
            "$ref": "#/components/schemas/aws.InterfaceAttachment"
          },
          "id": {
            "type": "string"
          },
          "ipv4Addresses": {
            "items": {
              "$ref": "#/components/schemas/aws.IPv4Address"
            },
            "type": "array"
          },
          "macAddress": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "networkId": {
            "type": "string"
          },
          "networkName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "networkId",
          "networkName",
          "ipv4Addresses",
          "attachment",
          "macAddress"
        ],
        "type": "object"
      },
      "aws.InterfaceAttachment": {
        "properties": {
          "subnetId": {
            "type": "string"
          },
          "vmId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "vmId",
          "subnetId"
        ],
        "type": "object"
      },
      "aws.Keypair": {
        "description": "Single keypair",
        "properties": {
          "fingerprint": {
            "description": "Keypair fingerprint",
            "type": "string"
          },
          "id": {
            "description": "Keypair id",
            "type": "string"
          },
          "name": {
            "description": "Keypair name",
            "type": "string"
          },
          "privateKey": {
            "description": "Private key material. Only available when creating a new key.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "fingerprint",
          "privateKey"
        ],
        "type": "object"
      },
      "aws.ManagementStatus": {
        "description": "Management status information",
        "properties": {
          "status": {
            "enum": [
              "notAvailable",
              "notEnabled",
              "available"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "aws.Network": {
        "properties": {
          "addressPrefix": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/aws.NetworkId"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "addressPrefix"
        ],
        "type": "object"
      },
      "aws.NetworkId": {
        "example": "vpc-d0a704b9",
        "format": "networkId",
        "type": "string"
      },
      "aws.NewVolumeAttachment": {
        "properties": {
          "device": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "device",
          "vmId"
        ],
        "type": "object"
      },
      "aws.OptionalWorkshift": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/aws.Workshift"
          },
          {
            "nullable": true,
            "type": "object"
          }
        ]
      },
      "aws.Region": {
        "description": "Single region",
        "properties": {
          "id": {
            "description": "Region id",
            "type": "string"
          },
          "name": {
            "description": "Region name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "aws.SecurityGroup": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "aws.Snapshot": {
        "description": "Single snapshot",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "vmId",
          "createdAt"
        ],
        "type": "object"
      },
      "aws.Subnet": {
        "properties": {
          "availabilityZone": {
            "deprecated": true,
            "description": "Availability Zone",
            "type": "string"
          },
          "availabilityZoneId": {
            "description": "Availability Zone",
            "type": "string"
          },
          "cidr": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "cidr",
          "availabilityZoneId"
        ],
        "type": "object"
      },
      "aws.SubscriptionId": {
        "format": "uuid",
        "type": "string"
      },
      "aws.Tag": {
        "properties": {
          "name": {
            "description": "Name (key) of the tag",
            "type": "string"
          },
          "value": {
            "description": "Value of the tag",
            "type": "string"
          }
        },
        "type": "object"
      },
      "aws.TagUpdate": {
        "description": "Tag update data. It will unset tag from a VM if null value is passed.",
        "properties": {
          "name": {
            "description": "Name (key) of the tag",
            "type": "string"
          },
          "value": {
            "description": "Value of the tag",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "aws.UpdateVmParams": {
        "properties": {
          "flavorId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "aws.UpdateVolumeParams": {
        "properties": {
          "sizeInGb": {
            "description": "New disk size in GB",
            "type": "integer"
          }
        },
        "required": [
          "sizeInGb"
        ],
        "type": "object"
      },
      "aws.VMCreate": {
        "properties": {
          "availabilityZone": {
            "deprecated": true,
            "description": "Availability zone",
            "type": "string"
          },
          "availabilityZoneId": {
            "description": "Availability zone id",
            "type": "string"
          },
          "flavorId": {
            "description": "Flavor id",
            "type": "string"
          },
          "imageId": {
            "description": "Image id user for VM creation",
            "type": "string"
          },
          "keypairId": {
            "description": "Keypair id",
            "type": "string"
          },
          "managementEnabled": {
            "deprecated": true,
            "description": "Specifies if management of a VM in EOS is enabled",
            "type": "boolean"
          },
          "mangementToolId": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "VM name",
            "pattern": "^(?!-)[A-Za-z0-9-_]{1,63}(?<!-)$",
            "type": "string"
          },
          "nics": {
            "deprecated": true,
            "description": "List of network ids. Set eiher nics or subnetId.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "securityGroupIds": {
            "description": "List of security group ids",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "securityGroups": {
            "deprecated": true,
            "description": "List of security group ids",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subnetId": {
            "description": "Subnet id. Set either nics or subnetId.",
            "type": "string"
          },
          "tags": {
            "description": "Tags (name and value) assigned to this VM",
            "items": {
              "$ref": "#/components/schemas/aws.Tag"
            },
            "maxItems": 15,
            "minItems": 0,
            "type": "array",
            "uniqueItems": true
          },
          "volumeSize": {
            "description": "Volume size in GB",
            "type": "integer"
          },
          "volumeTypeId": {
            "default": "gp2",
            "description": "Volume type id that will be used as OS volume",
            "type": "string"
          },
          "workshift": {
            "$ref": "#/components/schemas/aws.OptionalWorkshift"
          }
        },
        "required": [
          "name",
          "imageId",
          "flavorId",
          "keypairId",
          "volumeSize",
          "volumeTypeId",
          "tags"
        ],
        "type": "object"
      },
      "aws.VMDetail": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "aws.VMExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/aws.VMSimple"
          },
          {
            "properties": {
              "allowedPowerActions": {
                "items": {
                  "$ref": "#/components/schemas/aws.VMPowerAction"
                },
                "maxItems": 3,
                "minItems": 0,
                "readOnly": true,
                "type": "array",
                "uniqueItems": true
              },
              "interfaceIds": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "interfaces": {
                "deprecated": true,
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "status": {
                "enum": [
                  "ok",
                  "error",
                  "pending"
                ],
                "readOnly": true,
                "type": "string"
              },
              "statusMessage": {
                "nullable": true,
                "readOnly": true,
                "type": "string"
              },
              "volumeIds": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "volumes": {
                "deprecated": true,
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "workshift": {
                "$ref": "#/components/schemas/aws.OptionalWorkshift"
              }
            },
            "required": [
              "interfaceIds",
              "volumeIds",
              "allowedPowerActions",
              "status"
            ],
            "type": "object"
          }
        ]
      },
      "aws.VMPowerAction": {
        "enum": [
          "start",
          "poweroff",
          "softReboot",
          "hardReboot"
        ],
        "type": "string",
        "uniqueItems": true
      },
      "aws.VMSimple": {
        "properties": {
          "availabilityZone": {
            "deprecated": true,
            "description": "Availability Zone",
            "type": "string"
          },
          "availabilityZoneId": {
            "description": "Availability Zone",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "x-nullable": true
          },
          "flavorId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageId": {
            "type": "string"
          },
          "isManaged": {
            "deprecated": true,
            "type": "boolean"
          },
          "managementToolId": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "powerState": {
            "enum": [
              "unknown",
              "running",
              "stopped",
              "pending",
              "noState",
              "terminating",
              "terminated"
            ],
            "type": "string"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/aws.Tag"
            },
            "maxItems": 15,
            "minItems": 0,
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "id",
          "name",
          "isManaged",
          "managementToolId",
          "flavorId",
          "imageId",
          "powerState",
          "tags",
          "availabilityZoneId",
          "availabilityZone"
        ],
        "type": "object"
      },
      "aws.ValidateSubscription": {
        "properties": {
          "accessKey": {
            "description": "AWS subscription access key",
            "type": "string"
          },
          "regionId": {
            "description": "AWS region id",
            "type": "string"
          },
          "secretKey": {
            "description": "AWS subscription secret key",
            "type": "string"
          }
        },
        "required": [
          "accessKey",
          "secretKey",
          "regionId"
        ],
        "type": "object"
      },
      "aws.Volume": {
        "description": "Volume",
        "properties": {
          "attachment": {
            "$ref": "#/components/schemas/aws.VolumeAttachment",
            "x-nullabe": true
          },
          "availabilityZone": {
            "deprecated": true,
            "description": "Availability Zone",
            "type": "string"
          },
          "availabilityZoneId": {
            "description": "Availability Zone",
            "type": "string"
          },
          "createdAt": {
            "description": "Disk creation date",
            "type": "string"
          },
          "id": {
            "description": "Volume id",
            "type": "string"
          },
          "isOsDisk": {
            "description": "If set to true volume is an OS disk, otherwise it is a data disk",
            "type": "boolean"
          },
          "name": {
            "description": "Disk name",
            "type": "string"
          },
          "sizeInGb": {
            "description": "Disk size in GB",
            "type": "integer"
          },
          "status": {
            "description": "Disk state, e.g. in-use",
            "type": "string"
          },
          "tags": {
            "description": "Tags (name and value) assigned to this Volume",
            "items": {
              "$ref": "#/components/schemas/aws.Tag"
            },
            "maxItems": 15,
            "minItems": 0,
            "type": "array",
            "uniqueItems": true
          },
          "typeId": {
            "$ref": "#/components/schemas/aws.VolumeTypeId"
          }
        },
        "required": [
          "id",
          "createdAt",
          "sizeInGb",
          "status",
          "name",
          "availabilityZoneId",
          "attachment",
          "typeId",
          "isOsDisk",
          "tags"
        ],
        "type": "object"
      },
      "aws.VolumeAttachment": {
        "nullable": true,
        "properties": {
          "device": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "device",
          "vmId"
        ],
        "type": "object"
      },
      "aws.VolumeStatus": {
        "enum": [
          "available",
          "inUse",
          "pending",
          "error",
          "deleted",
          "unknown"
        ],
        "type": "string"
      },
      "aws.VolumeType": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/aws.VolumeTypeId"
          },
          "isOsCompatible": {
            "description": "States if volume can be used as os volume",
            "type": "boolean"
          },
          "maxVolumeSizeInGb": {
            "description": "Highest volume size that can be created with given volume type",
            "type": "integer"
          },
          "minVolumeSizeInGb": {
            "description": "Minimal volume size that can be created with given volume type",
            "type": "integer"
          },
          "name": {
            "description": "Human readable name of the volume type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "aws.VolumeTypeId": {
        "enum": [
          "gp2",
          "io1",
          "st1",
          "sc1",
          "standard",
          "unknown"
        ],
        "example": "Premium_LRS",
        "type": "string"
      },
      "aws.Workshift": {
        "properties": {
          "start": {
            "$ref": "#/components/schemas/aws.WorkshiftSchedule"
          },
          "stop": {
            "$ref": "#/components/schemas/aws.WorkshiftSchedule"
          }
        },
        "required": [
          "start",
          "stop"
        ],
        "type": "object"
      },
      "aws.WorkshiftSchedule": {
        "properties": {
          "days": {
            "items": {
              "enum": [
                "mon",
                "tue",
                "wed",
                "thu",
                "fri",
                "sat",
                "sun"
              ],
              "type": "string"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "hour": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer"
          },
          "minute": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "hour",
          "minute",
          "days"
        ],
        "type": "object"
      }
    },
    "parameters": {
      "config.provider_id": {
        "name": "provider_id",
        "in": "path",
        "required": true,
        "description": "Provider id",
        "schema": {
          "type": "string"
        }
      },
      "config.tool_id": {
        "name": "tool_id",
        "in": "path",
        "required": true,
        "description": "Management tool id",
        "schema": {
          "type": "string"
        }
      },
      "config.platform_id": {
        "name": "platform_id",
        "in": "path",
        "required": true,
        "description": "Platform id",
        "schema": {
          "type": "string",
          "enum": [
            "aws",
            "azure",
            "vmware"
          ]
        }
      },
      "subscr.subscription_id": {
        "name": "subscription_id",
        "in": "path",
        "required": true,
        "description": "Id of a subscription",
        "schema": {
          "type": "string"
        }
      },
      "subscr.vm_uid": {
        "name": "vm_uid",
        "in": "path",
        "required": true,
        "description": "VM id",
        "schema": {
          "type": "string"
        }
      },
      "img_whitelist.subscriptionId": {
        "name": "subscriptionId",
        "required": true,
        "in": "query",
        "description": "Subscription id",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "img_whitelist.imageId": {
        "name": "imageId",
        "required": true,
        "in": "path",
        "description": "Image id",
        "schema": {
          "type": "string"
        }
      },
      "img_whitelist.imageName": {
        "name": "name",
        "required": true,
        "in": "query",
        "description": "Image name to specify OS",
        "schema": {
          "type": "string"
        }
      },
      "img_whitelist.name": {
        "name": "name",
        "required": false,
        "in": "query",
        "description": "Image name to filter by",
        "schema": {
          "type": "string"
        }
      },
      "img_whitelist.limit": {
        "name": "limit",
        "required": false,
        "in": "query",
        "description": "Limit of images to show",
        "schema": {
          "type": "integer",
          "default": 10
        }
      },
      "img_whitelist.page": {
        "name": "page",
        "required": false,
        "in": "query",
        "description": "Number of the page for pagination",
        "schema": {
          "type": "integer",
          "default": 1
        }
      },
      "img_whitelist.private": {
        "name": "isPrivate",
        "required": false,
        "in": "query",
        "description": "Parameter to filter public/ private images. If it is set to true return private images, if it is set to false return public images, if it is not passed return all images.",
        "schema": {
          "type": "boolean"
        }
      },
      "vmware.AvailabilityZoneId": {
        "description": "Availability zone to filter by",
        "in": "query",
        "name": "availabilityZoneId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "vmware.FilterVolumeStatus": {
        "description": "Volume status to filter by",
        "in": "query",
        "name": "status",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/vmware.VolumeStatus"
        }
      },
      "vmware.ImageName": {
        "description": "Name of the image to filter",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "minLength": 1,
          "type": "string"
        }
      },
      "vmware.SubscriptionId": {
        "description": "Id of subscription",
        "in": "query",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/vmware.SubscriptionId"
        }
      },
      "vmware.VMId": {
        "description": "Id of VM",
        "in": "path",
        "name": "vmId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/vmware.VMId"
        }
      },
      "vmware.VMIdQuery": {
        "description": "Id of VM in query",
        "in": "query",
        "name": "vmId",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/vmware.VMId"
        }
      },
      "vmware.VolumeId": {
        "description": "ID of Volume",
        "in": "path",
        "name": "volume_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/vmware.VolumeId"
        }
      },
      "azure.SubscriptionId": {
        "name": "subscriptionId",
        "in": "query",
        "description": "ID of subscription",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/azure.SubscriptionId"
        }
      },
      "azure.OptionalSubscriptionId": {
        "name": "subscriptionId",
        "in": "query",
        "description": "Optional ID of subscription",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/azure.SubscriptionId"
        }
      },
      "azure.VMId": {
        "name": "vm_id",
        "in": "path",
        "description": "ID of VM",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/azure.VMId"
        }
      },
      "azure.VMIdQuery": {
        "name": "vmId",
        "in": "query",
        "description": "ID of VM in query string",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/azure.VMId"
        }
      },
      "azure.VMPowerAction": {
        "name": "action",
        "in": "path",
        "required": true,
        "description": "Commands for the VM",
        "schema": {
          "$ref": "#/components/schemas/azure.VMPowerAction"
        }
      },
      "azure.FlavorId": {
        "name": "flavor_id",
        "in": "path",
        "description": "ID of Flavor",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/azure.FlavorId"
        }
      },
      "azure.VolumeId": {
        "name": "volume_id",
        "in": "path",
        "description": "ID of Volume",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/azure.VolumeId"
        }
      },
      "azure.ImageName": {
        "name": "name",
        "in": "query",
        "description": "Full/partial name of an image to look for",
        "required": false,
        "schema": {
          "type": "string",
          "minLength": 1
        }
      },
      "azure.KeypairId": {
        "name": "keypair_id",
        "in": "path",
        "description": "Id of the keypair",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/azure.KeypairId"
        }
      },
      "azure.NetworkId": {
        "name": "network_id",
        "in": "path",
        "required": true,
        "description": "ID of network",
        "schema": {
          "$ref": "#/components/schemas/azure.NetworkId"
        }
      },
      "azure.ImageId": {
        "name": "image_id",
        "in": "path",
        "description": "Image id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/azure.ImageId"
        }
      },
      "azure.SecurityGroupId": {
        "name": "security_group_id",
        "in": "path",
        "required": true,
        "description": "Security group id",
        "schema": {
          "$ref": "#/components/schemas/azure.SecurityGroupId"
        }
      },
      "azure.AvailabilitySetId": {
        "name": "availability_set_id",
        "in": "path",
        "required": true,
        "description": "Availability Set ID",
        "schema": {
          "$ref": "#/components/schemas/azure.AvailabilitySetId"
        }
      },
      "azure.FilterAvailabilitySetId": {
        "name": "availabilitySetId",
        "in": "query",
        "required": false,
        "description": "Availability Set ID",
        "schema": {
          "$ref": "#/components/schemas/azure.AvailabilitySetId"
        }
      },
      "azure.FilterVMId": {
        "name": "vmId",
        "in": "query",
        "description": "Vm id to filter by",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/azure.VMId"
        }
      },
      "azure.FilterNetworkId": {
        "name": "networkId",
        "in": "query",
        "description": "Network id to filter by",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/azure.NetworkId"
        }
      },
      "azure.FilterSubnetId": {
        "name": "subnetId",
        "in": "query",
        "description": "Subnet id to filter by",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/azure.SubnetId"
        }
      },
      "azure.FilterAvailabilityZone": {
        "name": "availabilityZone",
        "in": "query",
        "description": "Availibility zone to filter by",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/azure.AvailabilityZoneId"
        }
      },
      "azure.FilterAvailabilityZoneId": {
        "name": "availabilityZoneId",
        "in": "query",
        "description": "Availibility zone id to filter by",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/azure.AvailabilityZoneId"
        }
      },
      "azure.FilterVolumeStatus": {
        "name": "status",
        "in": "query",
        "required": false,
        "description": "Volume status to filter by",
        "schema": {
          "$ref": "#/components/schemas/azure.VolumeStatus"
        }
      },
      "azure.FilterIsOsDisk": {
        "name": "isOsDisk",
        "in": "query",
        "description": "Filter volumes by IsOsDisk value",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/azure.IsOsDisk"
        }
      },
      "azure.FilterIsOsCompatible": {
        "name": "isOsCompatible",
        "in": "query",
        "description": "Filter volumes by OS compatibility",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/azure.IsOsCompatible"
        }
      },
      "azure.SnapshotId": {
        "name": "snapshot_id",
        "in": "path",
        "description": "snapshot ID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/azure.SnapshotId"
        }
      },
      "aws.Action": {
        "in": "path",
        "name": "action",
        "required": true,
        "schema": {
          "enum": [
            "start",
            "poweroff",
            "softReboot",
            "hardReboot"
          ],
          "type": "string"
        }
      },
      "aws.AvailabilityZone": {
        "deprecated": true,
        "description": "Availability zone to filter by",
        "in": "query",
        "name": "availabilityZone",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "aws.AvailabilityZoneId": {
        "description": "Availability zone to filter by",
        "in": "query",
        "name": "availabilityZoneId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "aws.FilterNetworkId": {
        "description": "Network id to filter by",
        "in": "query",
        "name": "networkId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "aws.FilterSubnetId": {
        "description": "Subnet id to filter by",
        "in": "query",
        "name": "subnetId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "aws.FilterVmId": {
        "description": "Vm id to filter by",
        "in": "query",
        "name": "vmId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "aws.FlavorId": {
        "description": "Flavor id",
        "in": "path",
        "name": "flavor_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "aws.ImageId": {
        "description": "Image id",
        "in": "path",
        "name": "image_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "aws.ImageNameFilter": {
        "description": "Image name to filter by. Specify name or id",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "aws.IsOSCompatible": {
        "in": "query",
        "name": "isOsCompatible",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "aws.IsOSDisk": {
        "description": "Filter volumes by isOsDisk value",
        "in": "query",
        "name": "isOsDisk",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "aws.KeypairId": {
        "description": "Keypair id",
        "in": "path",
        "name": "keypair_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "aws.NetworkId": {
        "description": "ID of network",
        "in": "path",
        "name": "network_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/aws.NetworkId"
        }
      },
      "aws.OptionalSubscriptionId": {
        "description": "Id of subscription",
        "in": "query",
        "name": "subscriptionId",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/aws.SubscriptionId"
        }
      },
      "aws.SecurityGroupId": {
        "description": "Security Group Id",
        "in": "path",
        "name": "security_group_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "aws.SnapshotId": {
        "description": "Snapshot id",
        "in": "path",
        "name": "snapshot_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "aws.SubscriptionId": {
        "description": "Id of a subscription",
        "in": "query",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/aws.SubscriptionId"
        }
      },
      "aws.VmId": {
        "description": "Virtual Machine id",
        "in": "path",
        "name": "vm_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "aws.VmIdQuery": {
        "description": "VM id to attach volume",
        "in": "query",
        "name": "vmId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "aws.VolumeId": {
        "description": "Volume id",
        "in": "path",
        "name": "volume_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "aws.VolumeStatus": {
        "description": "Volume status to filter by",
        "in": "query",
        "name": "status",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/aws.VolumeStatus"
        }
      }
    },
    "requestBodies": {
      "config.MailProvider": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/config.MailProvider"
            }
          }
        },
        "description": "Provider data",
        "required": true
      },
      "mgmt.ManageVm": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mgmt.ManageVm"
            }
          }
        },
        "description": "Vm information",
        "required": true
      },
      "img_whitelist.ImageUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/img_whitelist.ImageUpdate"
            }
          }
        },
        "description": "Image details",
        "required": true
      }
    }
  }
}