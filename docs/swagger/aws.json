{
  "components": {
    "parameters": {
      "Action": {
        "in": "path",
        "name": "action",
        "required": true,
        "schema": {
          "enum": [
            "start",
            "poweroff",
            "softReboot",
            "hardReboot"
          ],
          "type": "string"
        }
      },
      "AvailabilityZone": {
        "deprecated": true,
        "description": "Availability zone to filter by",
        "in": "query",
        "name": "availabilityZone",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "AvailabilityZoneId": {
        "description": "Availability zone to filter by",
        "in": "query",
        "name": "availabilityZoneId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "FilterNetworkId": {
        "description": "Network id to filter by",
        "in": "query",
        "name": "networkId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "FilterSubnetId": {
        "description": "Subnet id to filter by",
        "in": "query",
        "name": "subnetId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "FilterVmId": {
        "description": "Vm id to filter by",
        "in": "query",
        "name": "vmId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "FlavorId": {
        "description": "Flavor id",
        "in": "path",
        "name": "flavor_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ImageId": {
        "description": "Image id",
        "in": "path",
        "name": "image_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ImageNameFilter": {
        "description": "Image name to filter by. Specify name or id",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "IsOSCompatible": {
        "in": "query",
        "name": "isOsCompatible",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "IsOSDisk": {
        "description": "Filter volumes by isOsDisk value",
        "in": "query",
        "name": "isOsDisk",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "KeypairId": {
        "description": "Keypair id",
        "in": "path",
        "name": "keypair_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "NetworkId": {
        "description": "ID of network",
        "in": "path",
        "name": "network_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/NetworkId"
        }
      },
      "OptionalSubscriptionId": {
        "description": "Id of subscription",
        "in": "query",
        "name": "subscriptionId",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/SubscriptionId"
        }
      },
      "SecurityGroupId": {
        "description": "Security Group Id",
        "in": "path",
        "name": "security_group_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SnapshotId": {
        "description": "Snapshot id",
        "in": "path",
        "name": "snapshot_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SubscriptionId": {
        "description": "Id of a subscription",
        "in": "query",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SubscriptionId"
        }
      },
      "VmId": {
        "description": "Virtual Machine id",
        "in": "path",
        "name": "vm_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "VmIdQuery": {
        "description": "VM id to attach volume",
        "in": "query",
        "name": "vmId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "VolumeId": {
        "description": "Volume id",
        "in": "path",
        "name": "volume_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "VolumeStatus": {
        "description": "Volume status to filter by",
        "in": "query",
        "name": "status",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/VolumeStatus"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Bad request"
      },
      "Conflict": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Object is in conflict state"
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Operation is forbidden"
      },
      "GatewayTiemout": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "There was a timeout inside of cluster"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Object was not found"
      },
      "ServiceUnavailable": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Service is unavailable"
      },
      "Timeout": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "There was a timeout when processing the request"
      },
      "UnexpectedError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Service encountered an error it does not know how to handle"
      },
      "UnprocessableEntity": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Server was able to read the request but the instructions are not correct"
      }
    },
    "schemas": {
      "AvailabilityZone": {
        "description": "Availability zone",
        "properties": {
          "available": {
            "deprecated": true,
            "description": "Indicates whether the zone state is available",
            "type": "boolean"
          },
          "id": {
            "description": "Availability zone id",
            "type": "string"
          },
          "isAvailable": {
            "description": "Indicates whether the zone stat is available",
            "type": "boolean"
          },
          "name": {
            "description": "Availability zone name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateKeypair": {
        "description": "New keypair creation data",
        "properties": {
          "name": {
            "description": "Keypair name. 1-255 ASCII characters. Must be unique within AWS account.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreateSnapshotParams": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "vmId",
          "name",
          "description"
        ],
        "type": "object"
      },
      "CreateVolumeParams": {
        "properties": {
          "availabilityZone": {
            "deprecated": true,
            "type": "string"
          },
          "availabilityZoneId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "description": "Volume size in GB",
            "type": "integer"
          },
          "typeId": {
            "$ref": "#/components/schemas/VolumeTypeId"
          },
          "vmId": {
            "description": "Vm id to which newly created volume will be attached",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "size",
          "typeId",
          "name"
        ],
        "type": "object"
      },
      "EncryptedPassword": {
        "properties": {
          "encryptedPassword": {
            "type": "string"
          }
        },
        "required": [
          "encryptedPassword"
        ],
        "type": "object"
      },
      "Error": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "Flavor": {
        "description": "Single flavor",
        "properties": {
          "compatibleVolumeTypeIds": {
            "description": "List of compatible volume type ids",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "diskInGb": {
            "description": "Disk size in GB",
            "type": "integer"
          },
          "ephemeralDiskInGb": {
            "deprecated": true,
            "description": "VM ephemeral disk size in GB",
            "type": "integer"
          },
          "id": {
            "description": "Flavor id",
            "type": "string"
          },
          "name": {
            "description": "Flavor name",
            "type": "string"
          },
          "ramInMb": {
            "description": "Memory size in MB",
            "type": "integer"
          },
          "vcpus": {
            "description": "Number of virtual CPUs",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "ramInMb",
          "diskInGb",
          "vcpus",
          "compatibleVolumeTypeIds"
        ],
        "type": "object"
      },
      "IPv4Address": {
        "properties": {
          "allowedActions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dnsName": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "ip": {
            "format": "ip",
            "type": "string"
          },
          "isDirectlyAssociated": {
            "type": "boolean"
          },
          "isFloating": {
            "type": "boolean"
          },
          "isPublic": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "ip",
          "name",
          "allowedActions",
          "isDirectlyAssociated",
          "isFloating",
          "isPublic"
        ],
        "type": "object"
      },
      "Image": {
        "description": "Single public/private image",
        "properties": {
          "id": {
            "description": "Image id",
            "type": "string"
          },
          "isPrivate": {
            "description": "Describe if image is private or not",
            "type": "boolean"
          },
          "maxDiskInGb": {
            "description": "Maximum disk size in GB",
            "type": "integer"
          },
          "minDiskInGb": {
            "description": "Minimum disk size in GB",
            "type": "integer"
          },
          "minRamInMb": {
            "description": "Minimum memory size in MB",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "minRamInMb",
          "minDiskInGb",
          "maxDiskInGb",
          "isPrivate"
        ],
        "type": "object"
      },
      "ImportKeypair": {
        "description": "New keypair import data",
        "properties": {
          "name": {
            "description": "Keypair name. 1-255 ASCII characters. Must be unique within AWS account.",
            "type": "string"
          },
          "publicKey": {
            "description": "Public key to import",
            "type": "string"
          }
        },
        "required": [
          "name",
          "publicKey"
        ],
        "type": "object"
      },
      "Interface": {
        "properties": {
          "attachment": {
            "$ref": "#/components/schemas/InterfaceAttachment"
          },
          "id": {
            "type": "string"
          },
          "ipv4Addresses": {
            "items": {
              "$ref": "#/components/schemas/IPv4Address"
            },
            "type": "array"
          },
          "macAddress": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "networkId": {
            "type": "string"
          },
          "networkName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "networkId",
          "networkName",
          "ipv4Addresses",
          "attachment",
          "macAddress"
        ],
        "type": "object"
      },
      "InterfaceAttachment": {
        "properties": {
          "subnetId": {
            "type": "string"
          },
          "vmId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "vmId",
          "subnetId"
        ],
        "type": "object"
      },
      "Keypair": {
        "description": "Single keypair",
        "properties": {
          "fingerprint": {
            "description": "Keypair fingerprint",
            "type": "string"
          },
          "id": {
            "description": "Keypair id",
            "type": "string"
          },
          "name": {
            "description": "Keypair name",
            "type": "string"
          },
          "privateKey": {
            "description": "Private key material. Only available when creating a new key.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "fingerprint",
          "privateKey"
        ],
        "type": "object"
      },
      "ManagementStatus": {
        "description": "Management status information",
        "properties": {
          "status": {
            "enum": [
              "notAvailable",
              "notEnabled",
              "available"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Network": {
        "properties": {
          "addressPrefix": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "addressPrefix"
        ],
        "type": "object"
      },
      "NetworkId": {
        "example": "vpc-d0a704b9",
        "format": "networkId",
        "type": "string"
      },
      "NewVolumeAttachment": {
        "properties": {
          "device": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "device",
          "vmId"
        ],
        "type": "object"
      },
      "OptionalWorkshift": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Workshift"
          },
          {
            "nullable": true,
            "type": "object"
          }
        ]
      },
      "Region": {
        "description": "Single region",
        "properties": {
          "id": {
            "description": "Region id",
            "type": "string"
          },
          "name": {
            "description": "Region name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "SecurityGroup": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "Snapshot": {
        "description": "Single snapshot",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "vmId",
          "createdAt"
        ],
        "type": "object"
      },
      "Subnet": {
        "properties": {
          "availabilityZone": {
            "deprecated": true,
            "description": "Availability Zone",
            "type": "string"
          },
          "availabilityZoneId": {
            "description": "Availability Zone",
            "type": "string"
          },
          "cidr": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "cidr",
          "availabilityZoneId"
        ],
        "type": "object"
      },
      "SubscriptionId": {
        "format": "uuid",
        "type": "string"
      },
      "Tag": {
        "properties": {
          "name": {
            "description": "Name (key) of the tag",
            "type": "string"
          },
          "value": {
            "description": "Value of the tag",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagUpdate": {
        "description": "Tag update data. It will unset tag from a VM if null value is passed.",
        "properties": {
          "name": {
            "description": "Name (key) of the tag",
            "type": "string"
          },
          "value": {
            "description": "Value of the tag",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "UpdateVmParams": {
        "properties": {
          "flavorId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateVolumeParams": {
        "properties": {
          "sizeInGb": {
            "description": "New disk size in GB",
            "type": "integer"
          }
        },
        "required": [
          "sizeInGb"
        ],
        "type": "object"
      },
      "VMCreate": {
        "properties": {
          "availabilityZone": {
            "deprecated": true,
            "description": "Availability zone",
            "type": "string"
          },
          "availabilityZoneId": {
            "description": "Availability zone id",
            "type": "string"
          },
          "flavorId": {
            "description": "Flavor id",
            "type": "string"
          },
          "imageId": {
            "description": "Image id user for VM creation",
            "type": "string"
          },
          "keypairId": {
            "description": "Keypair id",
            "type": "string"
          },
          "managementEnabled": {
            "deprecated": true,
            "description": "Specifies if management of a VM in EOS is enabled",
            "type": "boolean"
          },
          "mangementToolId": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "VM name",
            "pattern": "^(?!-)[A-Za-z0-9-_]{1,63}(?<!-)$",
            "type": "string"
          },
          "nics": {
            "deprecated": true,
            "description": "List of network ids. Set eiher nics or subnetId.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "securityGroupIds": {
            "description": "List of security group ids",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "securityGroups": {
            "deprecated": true,
            "description": "List of security group ids",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subnetId": {
            "description": "Subnet id. Set either nics or subnetId.",
            "type": "string"
          },
          "tags": {
            "description": "Tags (name and value) assigned to this VM",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "maxItems": 15,
            "minItems": 0,
            "type": "array",
            "uniqueItems": true
          },
          "volumeSize": {
            "description": "Volume size in GB",
            "type": "integer"
          },
          "volumeTypeId": {
            "default": "gp2",
            "description": "Volume type id that will be used as OS volume",
            "type": "string"
          },
          "workshift": {
            "$ref": "#/components/schemas/OptionalWorkshift"
          }
        },
        "required": [
          "name",
          "imageId",
          "flavorId",
          "keypairId",
          "volumeSize",
          "volumeTypeId",
          "tags"
        ],
        "type": "object"
      },
      "VMDetail": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "VMExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VMSimple"
          },
          {
            "properties": {
              "allowedPowerActions": {
                "items": {
                  "$ref": "#/components/schemas/VMPowerAction"
                },
                "maxItems": 3,
                "minItems": 0,
                "readOnly": true,
                "type": "array",
                "uniqueItems": true
              },
              "interfaceIds": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "interfaces": {
                "deprecated": true,
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "status": {
                "enum": [
                  "ok",
                  "error",
                  "pending"
                ],
                "readOnly": true,
                "type": "string"
              },
              "statusMessage": {
                "nullable": true,
                "readOnly": true,
                "type": "string"
              },
              "volumeIds": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "volumes": {
                "deprecated": true,
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "workshift": {
                "$ref": "#/components/schemas/OptionalWorkshift"
              }
            },
            "required": [
              "interfaceIds",
              "volumeIds",
              "allowedPowerActions",
              "status"
            ],
            "type": "object"
          }
        ]
      },
      "VMPowerAction": {
        "enum": [
          "start",
          "poweroff",
          "softReboot",
          "hardReboot"
        ],
        "type": "string",
        "uniqueItems": true
      },
      "VMSimple": {
        "properties": {
          "availabilityZone": {
            "deprecated": true,
            "description": "Availability Zone",
            "type": "string"
          },
          "availabilityZoneId": {
            "description": "Availability Zone",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "x-nullable": true
          },
          "flavorId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageId": {
            "type": "string"
          },
          "isManaged": {
            "deprecated": true,
            "type": "boolean"
          },
          "managementToolId": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "powerState": {
            "enum": [
              "unknown",
              "running",
              "stopped",
              "pending",
              "noState",
              "terminating",
              "terminated"
            ],
            "type": "string"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "maxItems": 15,
            "minItems": 0,
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "id",
          "name",
          "isManaged",
          "managementToolId",
          "flavorId",
          "imageId",
          "powerState",
          "tags",
          "availabilityZoneId",
          "availabilityZone"
        ],
        "type": "object"
      },
      "ValidateSubscription": {
        "properties": {
          "accessKey": {
            "description": "AWS subscription access key",
            "type": "string"
          },
          "regionId": {
            "description": "AWS region id",
            "type": "string"
          },
          "secretKey": {
            "description": "AWS subscription secret key",
            "type": "string"
          }
        },
        "required": [
          "accessKey",
          "secretKey",
          "regionId"
        ],
        "type": "object"
      },
      "Volume": {
        "description": "Volume",
        "properties": {
          "attachment": {
            "$ref": "#/components/schemas/VolumeAttachment",
            "x-nullabe": true
          },
          "availabilityZone": {
            "deprecated": true,
            "description": "Availability Zone",
            "type": "string"
          },
          "availabilityZoneId": {
            "description": "Availability Zone",
            "type": "string"
          },
          "createdAt": {
            "description": "Disk creation date",
            "type": "string"
          },
          "id": {
            "description": "Volume id",
            "type": "string"
          },
          "isOsDisk": {
            "description": "If set to true volume is an OS disk, otherwise it is a data disk",
            "type": "boolean"
          },
          "name": {
            "description": "Disk name",
            "type": "string"
          },
          "sizeInGb": {
            "description": "Disk size in GB",
            "type": "integer"
          },
          "status": {
            "description": "Disk state, e.g. in-use",
            "type": "string"
          },
          "tags": {
            "description": "Tags (name and value) assigned to this Volume",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "maxItems": 15,
            "minItems": 0,
            "type": "array",
            "uniqueItems": true
          },
          "typeId": {
            "$ref": "#/components/schemas/VolumeTypeId"
          }
        },
        "required": [
          "id",
          "createdAt",
          "sizeInGb",
          "status",
          "name",
          "availabilityZoneId",
          "attachment",
          "typeId",
          "isOsDisk",
          "tags"
        ],
        "type": "object"
      },
      "VolumeAttachment": {
        "nullable": true,
        "properties": {
          "device": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          }
        },
        "required": [
          "device",
          "vmId"
        ],
        "type": "object"
      },
      "VolumeStatus": {
        "enum": [
          "available",
          "inUse",
          "pending",
          "error",
          "deleted",
          "unknown"
        ],
        "type": "string"
      },
      "VolumeType": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/VolumeTypeId"
          },
          "isOsCompatible": {
            "description": "States if volume can be used as os volume",
            "type": "boolean"
          },
          "maxVolumeSizeInGb": {
            "description": "Highest volume size that can be created with given volume type",
            "type": "integer"
          },
          "minVolumeSizeInGb": {
            "description": "Minimal volume size that can be created with given volume type",
            "type": "integer"
          },
          "name": {
            "description": "Human readable name of the volume type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VolumeTypeId": {
        "enum": [
          "gp2",
          "io1",
          "st1",
          "sc1",
          "standard",
          "unknown"
        ],
        "example": "Premium_LRS",
        "type": "string"
      },
      "Workshift": {
        "properties": {
          "start": {
            "$ref": "#/components/schemas/WorkshiftSchedule"
          },
          "stop": {
            "$ref": "#/components/schemas/WorkshiftSchedule"
          }
        },
        "required": [
          "start",
          "stop"
        ],
        "type": "object"
      },
      "WorkshiftSchedule": {
        "properties": {
          "days": {
            "items": {
              "enum": [
                "mon",
                "tue",
                "wed",
                "thu",
                "fri",
                "sat",
                "sun"
              ],
              "type": "string"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "hour": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer"
          },
          "minute": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "hour",
          "minute",
          "days"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "description": "Service for AWS platform management",
    "title": "AWS service",
    "version": "2.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/availabilityZones": {
      "get": {
        "description": "List all availability zones",
        "operationId": "aws_service.api.availability_zones.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AvailabilityZone"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of availability zones"
          }
        }
      }
    },
    "/flavors": {
      "get": {
        "operationId": "aws_service.api.flavors.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Flavor"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Lists flavors"
      }
    },
    "/flavors/{flavor_id}": {
      "get": {
        "operationId": "aws_service.api.flavor.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FlavorId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flavor"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "Get flavor by id"
      }
    },
    "/images/{image_id}": {
      "get": {
        "deprecated": true,
        "operationId": "aws_service.api.image.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/ImageId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets image by id"
      }
    },
    "/interfaces": {
      "get": {
        "operationId": "aws_service.api.interfaces.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterVmId"
          },
          {
            "$ref": "#/components/parameters/FilterNetworkId"
          },
          {
            "$ref": "#/components/parameters/FilterSubnetId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Interface"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of interfaces"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets interfaces for specified subscription"
      }
    },
    "/keypairs": {
      "get": {
        "operationId": "aws_service.api.keypairs.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZone"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Keypair"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Lists keypairs"
      }
    },
    "/keypairs/generate": {
      "post": {
        "operationId": "aws_service.api.keypair_generate.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeypair"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Create a new keypair"
      }
    },
    "/keypairs/import": {
      "post": {
        "operationId": "aws_service.api.keypair_import.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportKeypair"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "applicaiton/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Import a new public key"
      }
    },
    "/keypairs/{keypair_id}": {
      "delete": {
        "operationId": "aws_service.api.keypair.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/KeypairId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Delete keypair by id"
      },
      "get": {
        "operationId": "aws_service.api.keypair.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/KeypairId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Get keypair by id"
      }
    },
    "/networks": {
      "get": {
        "operationId": "aws_service.api.networks.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZone"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Network"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets list of all networks"
      }
    },
    "/networks/{network_id}/subnets": {
      "get": {
        "operationId": "aws_service.api.network_subnets.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/NetworkId"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZoneId"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Subnet"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Lists subnets of specified network and subscription"
      }
    },
    "/privateImages": {
      "get": {
        "operationId": "aws_service.api.private_images.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/ImageNameFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Image"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Lists private images"
      }
    },
    "/privateImages/{image_id}": {
      "get": {
        "operationId": "aws_service.api.private_image.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/ImageId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets private image by id"
      }
    },
    "/publicImages": {
      "get": {
        "operationId": "aws_service.api.public_images.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/ImageNameFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Image"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Lists public images"
      }
    },
    "/publicImages/{image_id}": {
      "get": {
        "operationId": "aws_service.api.public_image.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/ImageId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets public image by id"
      }
    },
    "/regions": {
      "get": {
        "description": "Lists regions",
        "operationId": "aws_service.api.regions.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/OptionalSubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Region"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of regions"
          }
        }
      }
    },
    "/securityGroups": {
      "get": {
        "operationId": "aws_service.api.security_groups.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterVmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SecurityGroup"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of security groups"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Lists security groups for specified subscription"
      }
    },
    "/snapshots": {
      "get": {
        "operationId": "aws_service.api.snapshots.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/FilterVmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Snapshot"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of snapshots"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Lists snapshots"
      },
      "post": {
        "operationId": "aws_service.api.snapshots.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSnapshotParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Created snapshot"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Creates a new snapshot"
      }
    },
    "/snapshots/{snapshot_id}": {
      "delete": {
        "operationId": "aws_service.api.snapshot.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/SnapshotId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Deletes snapshots"
      }
    },
    "/validateSubscription": {
      "post": {
        "description": "Validate subscription credentials",
        "operationId": "aws_service.api.validate_subscription.post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/vms": {
      "get": {
        "operationId": "aws_service.api.vms.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZoneId"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZone"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VMSimple"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets list of all vms"
      },
      "post": {
        "description": "Create a new virtual machine",
        "operationId": "aws_service.api.vms.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VMCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMExtended"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          },
          "504": {
            "$ref": "#/components/responses/GatewayTiemout"
          }
        }
      }
    },
    "/vms/{vm_id}": {
      "delete": {
        "operationId": "aws_service.api.vm.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Deletes VM by id"
      },
      "get": {
        "operationId": "aws_service.api.vm.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMExtended"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets vm by id"
      },
      "patch": {
        "operationId": "aws_service.api.vm.patch",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVmParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Modify VM properties"
      }
    },
    "/vms/{vm_id}/command/{action}": {
      "put": {
        "operationId": "aws_service.api.vm_command.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          },
          {
            "$ref": "#/components/parameters/Action"
          }
        ],
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Excecutes power action on a VM"
      }
    },
    "/vms/{vm_id}/details": {
      "get": {
        "operationId": "aws_service.api.vm_details.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VMDetail"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of VM details"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets VM details"
      }
    },
    "/vms/{vm_id}/management": {
      "get": {
        "operationId": "aws_service.api.vm_management.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementStatus"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets management status for a VM"
      }
    },
    "/vms/{vm_id}/password": {
      "get": {
        "description": "Get encrypted password for a VM",
        "operationId": "aws_service.api.vm_password.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptedPassword"
                }
              }
            },
            "description": "Object with encrypted password"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/vms/{vm_id}/securityGroups/{security_group_id}": {
      "delete": {
        "operationId": "aws_service.api.vm_security_group.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          },
          {
            "$ref": "#/components/parameters/SecurityGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "Security group was not assigned assigned to VM"
          },
          "201": {
            "description": "Security group was removed from VM"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Removes Security Group from a specified VM"
      },
      "put": {
        "operationId": "aws_service.api.vm_security_group.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          },
          {
            "$ref": "#/components/parameters/SecurityGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "Security group is already assigned to VM"
          },
          "201": {
            "description": "Security group was assigned to VM"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Assign Security Group to a specified VM"
      }
    },
    "/vms/{vm_id}/setTag": {
      "put": {
        "operationId": "aws_service.api.vm_tag.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Set tag value for VM"
      }
    },
    "/vms/{vm_id}/workshift": {
      "delete": {
        "operationId": "aws_service.api.vm_workshift.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          }
        ],
        "responses": {
          "204": {
            "description": "Workshift deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Delete VM Workshift"
      },
      "post": {
        "operationId": "aws_service.api.vm_workshift.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workshift"
              }
            }
          },
          "description": "Workshift object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workshift"
                }
              }
            },
            "description": "Workshift created successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Add a workshift to the VM"
      },
      "put": {
        "operationId": "aws_service.api.vm_workshift.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VmId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workshift"
              }
            }
          },
          "description": "Workshift object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workshift"
                }
              }
            },
            "description": "Workshift updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Update VM Workshift"
      }
    },
    "/volumeTypes": {
      "get": {
        "operationId": "aws_service.api.volume_types.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/IsOSCompatible"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZoneId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VolumeType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets a list of all volume types user can create volume with"
      }
    },
    "/volumes": {
      "get": {
        "operationId": "aws_service.api.volumes.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZoneId"
          },
          {
            "$ref": "#/components/parameters/AvailabilityZone"
          },
          {
            "$ref": "#/components/parameters/VolumeStatus"
          },
          {
            "$ref": "#/components/parameters/IsOSDisk"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Volume"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets list of all volumes"
      },
      "post": {
        "operationId": "aws_service.api.volumes.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVolumeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Creates a new EBS volume"
      }
    },
    "/volumes/{volume_id}": {
      "delete": {
        "operationId": "aws_service.api.volume.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VolumeId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Deletes volume by id"
      },
      "get": {
        "operationId": "aws_service.api.volume.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VolumeId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Gets volume by id"
      },
      "patch": {
        "operationId": "aws_service.api.volume.patch",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VolumeId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVolumeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Volume was updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        },
        "summary": "Modify volume properties"
      }
    },
    "/volumes/{volume_id}/attach": {
      "put": {
        "description": "Attach volume to specified VM",
        "operationId": "aws_service.api.volume_attachment.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VolumeId"
          },
          {
            "$ref": "#/components/parameters/VmIdQuery"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewVolumeAttachment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/volumes/{volume_id}/detach": {
      "delete": {
        "description": "Detach volume from a specified vm",
        "operationId": "aws_service.api.volume_attachment.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/SubscriptionId"
          },
          {
            "$ref": "#/components/parameters/VolumeId"
          },
          {
            "$ref": "#/components/parameters/VmIdQuery"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "AWS Service",
      "url": "/api/v1/aws/compute"
    }
  ]
}